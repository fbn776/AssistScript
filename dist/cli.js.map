{"version":3,"sources":["../src/lang-core/errors/ASBaseError.ts","../src/lang-core/errors/ASMakeError.ts","../src/utils/randomTokenID.ts","../src/lang-core/specs/tokens/LangTokenBase.ts","../src/lang-core/specs/tokens/lexmes/NumberToken.ts","../src/lang-core/specs/tokens/lexmes/BooleanToken.ts","../src/lang-core/specs/tokens/DataType.ts","../src/lang-core/utils/lang_utils.ts","../src/lang-core/interpreter/CommandStore.ts","../src/utils/Stack.ts","../src/utils/ArrayTokenizer.ts","../src/lang-core/specs/tokens/lexmes/ContainerToken.ts","../src/lang-core/specs/tokens/lexmes/CommandToken.ts","../src/lang-core/errors/ErrorCodes.ts","../src/lang-core/errors/ASLangError.ts","../src/lang-core/specs/tokens/lexmes/StringToken.ts","../src/lang-core/interpreter/parser/ParserErrorChecks.ts","../src/lang-core/interpreter/parser/preprocessor.ts","../src/lang-core/interpreter/parser/parser.ts","../src/lang-core/interpreter/parser/generateSyntaxTree.ts","../src/lang-core/utils/ASTDisplay.ts","../src/lang-core/errors/ASRuntimeError.ts","../src/lang-core/interpreter/runner/hasProperArgType.ts","../src/lang-core/interpreter/runner/runCommand.ts","../src/lang-core/interpreter/runner/Runner.ts","../src/lang-core/services/VariableStore.ts","../src/lang-core/services/BaseContextProvider.ts","../src/lang-core/specs/lang-units/Documentation.ts","../src/lang-core/specs/lang-units/Parameters.ts","../src/lang-core/specs/lang-units/Command.ts","../src/lang-core/specs/CommandBuilder.ts","../src/lang-core/specs/DocsBuilder.ts","../src/utils/ASCII_char.ts","../src/lang-core/stdlib/basic/utils.ts","../src/lang-core/stdlib/basic/basic.ts","../src/lang-core/stdlib/operators/logical.ts","../src/lang-core/stdlib/operators/comparison.ts","../src/lang-core/stdlib/math/arthemetic.ts","../src/lang-core/stdlib/math/utils.ts","../src/lang-core/stdlib/math/functions.ts","../src/lang-core/stdlib/math/trigonometry.ts","../src/lang-core/stdlib/math/random.ts","../src/lang-core/stdlib/math/constants.ts","../src/lang-core/errors/ASGracefulExitError.ts","../src/lang-core/errors/ASInterrupt.ts","../src/lang-core/stdlib/ctrl/loops.ts","../src/lang-core/stdlib/ctrl/conditionals.ts","../src/lang-core/stdlib/ctrl/varibles.ts","../src/lang-core/stdlib/index.ts","../src/lang-core/AssistScript.ts","../src/cli.ts"],"names":["ASBaseError","init_ASBaseError","__esmMin","message","ASMakeError","init_ASMakeError","randomTokenID","str","i","alphabetStr","init_randomTokenID","LangTokenBase","init_LangTokenBase","value","type","NumberToken","init_NumberToken","BooleanToken","init_BooleanToken","DataType","DataType_default","init_DataType","hasOnlyRepeatedChars","a","convertToPossibleType","token","getRoughType","isNameValid","name","init_lang_utils","CommandStore","init_CommandStore","_CommandStore","cmd","Stack","init_Stack","getJoinedStrLength","tokenPos","offset","length","getJoinedTknLength","ArrayTokenizer","init_ArrayTokenizer","tokenArray","ContainerToken","LeftBracketToken","RightBracketToken","init_ContainerToken","CommandToken","init_CommandToken","params","isInternal","param","ErrorCodes","ErrorCodes_default","init_ErrorCodes","ASLangError","init_ASLangError","reason","source","position","fix","note","errorCode","errorToken","pos","effPos","src","start","end","StringToken","init_StringToken","ParserErrorChecks","init_ParserErrorChecks","hasInvalidQuoteError_TK","quoteStartIndex","quoteEndIndex","beforeStr","afterStr","inputTxt","tokens","hasUnclosedQuoteError_TK","startsWith","hasInvalidBracketError_TK","curr","bracketStart","bracketEnd","startI","endI","bracketPos","char","hasEmptyBracketError_ST","topCmd","hasRougeRightBracketError_ST","stack","hasRougeLeftBracketError_ST","bracketTrack","top","preprocessor","tokensIn","init_preprocessor","tokenizeParens","val","parser","parsedTokens","startIndexDQ","startIndexSQ","startIndex","initialIndex","init_parser","generateSyntaxTree","tk","tempStack","arr","init_generateSyntaxTree","drawVerLine","level","sep","ASTDisplay","base","errorAT","ASTErrorDisplay","isError","init_ASTDisplay","ASRuntimeError","init_ASRuntimeError","data","_a","hasProperArgType","index","init_hasProperArgType","execCmd","actualParams","defParams","initial","context","commandDef","finalParam","checkParams","runCommand","inputTkn","lazyEval","init_runCommand","prettifyString","Runner","init_Runner","asInstance","ast","VariableStore","init_VariableStore","calcT","BaseContextProvider","init_BaseContextProvider","state","Documentation","init_Documentation","title","aliases","body","syntax","example","Parameters","init_Parameters","num","Command","init_Command","names","docs","returnType","exec","CommandBuilder","init_CommandBuilder","category","DocsBuilder","init_DocsBuilder","ASCII_tl_corner","ASCII_horizontal","ASCII_l_cross","init_ASCII_char","prettyHelp","init_utils","store","builder","init_basic","_","args","command","init_logical","b","init_comparison","init_arthemetic","acc","gcdAB","gcd","result","init_functions","min","max","init_trigonometry","angle","y","x","init_random","init_constants","ASGracefulExitError","init_ASGracefulExitError","ASInterrupt","init_ASInterrupt","msg","runAndHandleError","init_loops","condition","limit","n","init","increment","init_conditionals","func","func1","func2","checkForNameError","checkForErrors","variable","checkArrayNameAndIndex","array","_b","init_varibles","values","init_stdlib","AssistScript","init_AssistScript","ctxProvider","e","fs","readline","require_cli","__commonJSMin","exports","program","file","options","__async","runFile","runRepl","as","runAssistScript","content","rl","line","trimmed"],"mappings":"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","sourcesContent":["/** A wrapper class for `Error`\r\n * Same as the Error class, but represents an error in the AS language\r\n */\r\nexport default class ASBaseError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n    }\r\n\r\n    /** Returns a prettified string representation of the error */\r\n    public prettify(): string {\r\n        return `${this.name}\r\nReason: ${this.message}`\r\n    }\r\n}","import ASBaseError from \"./ASBaseError\";\r\n\r\n/**\r\n * Represents errors' thrown during the make or startup process, like loading up the stdlib, documentations etc.\r\n * These are errors throws during the compilation process, not the runtime.\r\n * For e.g., If there is an invalid command name given to a CommandUnit, then this will be thrown;\r\n *\r\n * These are more like the 'dev' errors and not meant for the end users.\r\n */\r\nexport default class ASMakeError extends ASBaseError {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'ASMakeError';\r\n    }\r\n}","\r\nconst alphabetStr = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n\r\n/**\r\n * Returns a random string of length 16\r\n */\r\nexport default function randomTokenID(): string {\r\n    const len = 16;\r\n    let str = \"\";\r\n    for(let i = 0; i < len; i++) {\r\n        str += alphabetStr[Math.floor(Math.random() * alphabetStr.length)];\r\n    }\r\n\r\n    return str;\r\n}","import randomTokenID from \"../../../utils/randomTokenID\";\r\n\r\nexport interface TokenData {\r\n    allowedContainers: \"(\" | \")\"\r\n}\r\n\r\nexport enum TokenType {\r\n    STRING = \"TOKEN_STRING\",\r\n    NUMBER = \"TOKEN_NUMBER\",\r\n    BOOLEAN = \"TOKEN_BOOLEAN\",\r\n    COMMAND = \"TOKEN_COMMAND\",\r\n    SEPARATOR = \"TOKEN_SEPARATOR\"\r\n}\r\n\r\n/**\r\n * The base class of the token representation in AssistScript\r\n * All tokens extends this class\r\n */\r\nexport default class LangTokenBase<T> {\r\n    value: T;\r\n    readonly type: TokenType;\r\n    readonly tokenID;\r\n    constructor(value: T, type: TokenType) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.tokenID = randomTokenID();\r\n    }\r\n}\r\n\r\n","import LangTokenBase, {TokenType} from \"../LangTokenBase\";\r\n\r\nexport default class NumberToken extends LangTokenBase<number> {\r\n    constructor(value: number) {\r\n        super(value, TokenType.NUMBER);\r\n    }\r\n}","import LangTokenBase, {TokenType} from \"../LangTokenBase\";\r\n\r\nexport default class BooleanToken extends LangTokenBase<boolean> {\r\n    constructor(value: boolean) {\r\n        super(value, TokenType.BOOLEAN);\r\n    }\r\n}","enum DataType {\r\n    number = \"number\",\r\n    string = \"string\",\r\n    boolean = \"boolean\",\r\n    command = \"command\",\r\n    array = \"array\",\r\n    any = \"any\",\r\n    void = \"void\",\r\n}\r\n\r\nexport default DataType;","import LangTokenBase from \"../specs/tokens/LangTokenBase\";\r\nimport NumberToken from \"../specs/tokens/lexmes/NumberToken\";\r\nimport BooleanToken from \"../specs/tokens/lexmes/BooleanToken\";\r\nimport DataType from \"../specs/tokens/DataType\";\r\n\r\n/** Checks if a string only contains unique characters (may/may not repeat)\r\n * @internal*/\r\nexport function hasOnlyRepeatedChars(str: string) {\r\n    for (let a of str) {\r\n        if (a !== str[0]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/** Converts a base token to it's matching type token\r\n * @internal\r\n * */\r\nexport function convertToPossibleType(token: LangTokenBase<unknown>) {\r\n    if (!isNaN(Number(token.value)))\r\n        return new NumberToken(+(token.value as string));\r\n\r\n    if (token.value === \"true\" || token.value === \"false\")\r\n        return new BooleanToken(token.value === \"true\");\r\n\r\n    return token;\r\n}\r\n\r\n/**\r\n * Takes a value and returns its type as the Datatype enum\r\n */\r\nexport function getRoughType(value: unknown): DataType {\r\n    switch (typeof value) {\r\n        case \"string\":\r\n            return DataType.string;\r\n        case \"number\":\r\n            return DataType.number;\r\n        case \"boolean\":\r\n            return DataType.boolean;\r\n        default:\r\n            return DataType.any;\r\n    }\r\n}\r\n\r\nexport function getRoughArrayType(value: unknown[]): DataType {\r\n    let type = getRoughType(value[0]);\r\n    for(let val of value) {\r\n        if(type === \"string\" || type === \"any\")\r\n            break;\r\n\r\n        type = getRoughType(val);\r\n    }\r\n\r\n    return type;\r\n}\r\n\r\n/**\r\n * Checks if a string is a valid command or variable name.\r\n *\r\n * Checks for:\r\n * - Starts with a letter, underscore\r\n * - Contains only letters, numbers, underscores and hyphen.\r\n * - No special symbols or spaces.\r\n * @param name\r\n */\r\nexport function isNameValid(name: string): boolean {\r\n    return /^(?![0-9-])[\\w-]+$/.test(name);\r\n}","import Command from \"../specs/lang-units/Command\";\r\nimport ASMakeError from \"../errors/ASMakeError\";\r\nimport {isNameValid} from \"../utils/lang_utils\";\r\n\r\n/**\r\n * A singleton class that acts as the store for all the commands.\r\n * @internal\r\n */\r\nexport default class CommandStore {\r\n    private static _instance: CommandStore;\r\n    /** A map of each command;\r\n     * The name of the command is mapped to it's corresponding CommandUnit.\r\n     */\r\n    private _getStore = new Map<string, Command>();\r\n\r\n    /**\r\n     * Returns the singleton instance of the CommandStore.\r\n     * @returns The singleton instance of the CommandStore.\r\n     */\r\n    public static getInstance(): CommandStore {\r\n        if (!CommandStore._instance) {\r\n            CommandStore._instance = new CommandStore();\r\n        }\r\n\r\n        return CommandStore._instance;\r\n    }\r\n\r\n    private constructor() {}\r\n\r\n    /**\r\n     * Checks if a command with the given name exists.\r\n     * @param name The name of the command to check.\r\n     * @returns True if a command with the given name exists, false otherwise.\r\n     */\r\n    public hasCommand(name: string): boolean {\r\n        return this._getStore.has(name);\r\n    }\r\n\r\n    /**\r\n     * Returns the command with the given name.\r\n     * @param name The name of the command to get.\r\n     * @returns The command with the given name, or null if no such command exists.\r\n     */\r\n    public getCommand(name: string): Command | null {\r\n        return this._getStore.get(name) || null;\r\n    }\r\n\r\n    /**\r\n     * Adds a command to the store.\r\n     * @param cmd The instance of the command to add\r\n     */\r\n    public addCommand(cmd: Command) {\r\n        for (let name of cmd.names) {\r\n            if (this._getStore.has(name))\r\n                throw new ASMakeError(`The command name '${name}' already exists.`);\r\n\r\n            if (!isNameValid(name))\r\n                throw new ASMakeError(`The command name '${name}' is invalid. Command names should only include alphanumeric characters and underscores. And it should not start with a number.`);\r\n\r\n            this._getStore.set(name, cmd);\r\n        }\r\n    }\r\n\r\n    /** Returns the store of commands. */\r\n    get getStore(): Map<string, Command> {\r\n        return this._getStore;\r\n    }\r\n}","/**\r\n * Stack data structure.\r\n */\r\nexport default class Stack<E> {\r\n    private stack: E[] = [];\r\n\r\n    public push(e: E) {\r\n        this.stack.push(e);\r\n    }\r\n\r\n    public pop() {\r\n        return this.stack.pop();\r\n    }\r\n\r\n    public peek(): E | undefined {\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.stack.length === 0;\r\n    }\r\n\r\n    public size(): number {\r\n        return this.stack.length;\r\n    }\r\n\r\n    public clear() {\r\n        this.stack = [];\r\n    }\r\n\r\n    public display() {\r\n        console.log(this.stack);\r\n    }\r\n\r\n    public toArray() {return this.stack};\r\n}","import LangTokenBase from \"../lang-core/specs/tokens/LangTokenBase\";\r\n\r\n/**\r\n * A simple class to iterate over an array of tokens;\r\n * @param T the type of the token\r\n */\r\nexport class ArrayTokenizer<T> {\r\n    readonly tokens: T[];\r\n    private index: number = 0;\r\n\r\n    public get length() {\r\n        return this.tokens.length;\r\n    }\r\n\r\n    public get currIndex() {\r\n        return this.index\r\n    };\r\n\r\n    /** The array of type T to iterate over */\r\n    constructor(tokenArray: T[]) {\r\n        this.tokens = tokenArray\r\n    }\r\n\r\n    /** Returns the next token in the token's array, or null if there are no more tokens. */\r\n    nextToken(): T | null {\r\n        return this.tokens[this.index++] || null\r\n    }\r\n\r\n    /** Returns the current token in from the token's array, or null if there are no more tokens.\r\n     * This does not increment the index*/\r\n    currToken(): T | null {\r\n        return this.tokens[this.index] || null;\r\n    }\r\n\r\n    hasMoreTokens(): boolean {\r\n        return this.index < this.tokens.length;\r\n    }\r\n    reset(): void {\r\n        this.index = 0;\r\n    }\r\n}\r\n\r\n/** Returns the position of a token at the specified token position if all the tokens were joined together. */\r\nexport function getJoinedStrLength(token: ArrayTokenizer<string>, tokenPos: number, offset = 0): number {\r\n    if(tokenPos > token.length)\r\n        throw new Error(`Token position ${tokenPos} is greater than the length of the token array (${token.length})`)\r\n\r\n    let length = 0;\r\n    for (let i = 0; i < tokenPos; i++) {\r\n        length += token.tokens[i]!.length + offset;\r\n    }\r\n    return length - offset;\r\n}\r\n\r\n/** Same as `getJoinedStrLength`, but for `LangTokenBase`, sort of like a function overload*/\r\nexport function getJoinedTknLength(token: ArrayTokenizer<LangTokenBase<unknown>>, tokenPos: number, offset = 0): number {\r\n    if(tokenPos > token.length)\r\n        throw new Error(`Token position ${tokenPos} is greater than the length of the token array (${token.length})`)\r\n\r\n    let length = 0;\r\n    for (let i = 0; i < tokenPos; i++) {\r\n        length += (String(token.tokens[i]!.value)).length + offset;\r\n    }\r\n\r\n    return length - offset;\r\n}\r\n","import LangTokenBase, {TokenData, TokenType} from \"../LangTokenBase\";\r\n\r\nexport default class ContainerToken extends LangTokenBase<string> {\r\n    constructor(value: TokenData[\"allowedContainers\"]) {\r\n        super(value, TokenType.SEPARATOR);\r\n    }\r\n}\r\n\r\n/** Represents '('*/\r\nexport class LeftBracketToken extends ContainerToken {\r\n    constructor() {\r\n        super('(');\r\n    }\r\n}\r\n\r\n/** Represents ')'*/\r\nexport class RightBracketToken extends ContainerToken {\r\n    constructor() {\r\n        super(')');\r\n    }\r\n}","import LangTokenBase, {TokenType} from \"../LangTokenBase\";\r\n\r\n/**\r\n * Represents a command token, not the actual command object but an element of the specs tree\r\n */\r\nexport default class CommandToken extends LangTokenBase<string> {\r\n    readonly params: LangTokenBase<unknown>[];\r\n\r\n    /** Used to denote is the command is an internally generated command or not*/\r\n    readonly isInternal: boolean;\r\n\r\n    constructor(name: string, params: LangTokenBase<unknown>[], isInternal?: boolean) {\r\n        super(name, TokenType.COMMAND);\r\n        this.params = params;\r\n        this.isInternal = isInternal || false;\r\n    }\r\n\r\n    changeName(name: string){\r\n        this.value = name;\r\n    }\r\n\r\n    /** The command name*/\r\n    get commandName() {\r\n        return this.value;\r\n    }\r\n\r\n    appendParam(param: LangTokenBase<unknown>) {\r\n        this.params.push(param);\r\n    }\r\n}","enum ErrorCodes {\r\n    GenericError = \"GenericError\",\r\n    FoundNullToken = \"FoundNullToken\",\r\n    UnclosedQuote = \"UnclosedQuote\",\r\n    InvalidQuotes = \"InvalidQuote\",\r\n    InvalidBracket = \"InvalidBracket\",\r\n    EmptyCommand = \"EmptyCommand\",\r\n    PlaceholderError = \"PlaceholderError\",\r\n    UnclosedBracket = \"UnclosedBracket\",\r\n}\r\n\r\nexport default ErrorCodes;","import ErrorCodes from \"./ErrorCodes\";\r\nimport ASBaseError from \"./ASBaseError\";\r\n\r\ninterface ASLangErrorOptions {\r\n    name?: string,\r\n    reason: string,\r\n    source: string,\r\n    position?: number,\r\n    fix?: string,\r\n    note?: string,\r\n    errorCode: ErrorCodes;\r\n    errorToken?: string;\r\n}\r\n\r\n/**\r\n * Represents the base error thrown by the ASLang (AssistScript) interpreter.\r\n *\r\n * **NOTE: This does not include errors thrown by the JavaScript runtime**\r\n */\r\nexport default class ASLangError extends ASBaseError implements ASLangErrorOptions {\r\n\r\n    constructor(\r\n        {name = \"ASLangError\", reason, source, position, fix, note, errorCode = ErrorCodes.GenericError, errorToken}: ASLangErrorOptions\r\n    ) {\r\n        super(reason);\r\n        this.reason = reason;\r\n        this.name = name || \"ASLangError\";\r\n        this.source = source;\r\n        this.position = position;\r\n        this.fix = fix;\r\n        this.note = note;\r\n        this.errorCode = errorCode;\r\n        this.errorToken = errorToken;\r\n    }\r\n\r\n    reason: string;\r\n    source: string;\r\n    position?: number | undefined;\r\n    fix?: string | undefined;\r\n    note?: string | undefined;\r\n    errorCode: ErrorCodes;\r\n    errorToken?: string | undefined;\r\n\r\n\r\n    public prettify(): string {\r\n        const maxLen = 60;\r\n        const padding = 20;\r\n\r\n        const pos = (this.position || 0) - 1;\r\n        let effPos = pos;\r\n\r\n        let str = this.name + '\\n';\r\n        str += `Reason: ${this.reason}\\n`;\r\n        let src = String(this.source).trim();\r\n\r\n        console.log(src)\r\n\r\n        if(src.length > maxLen) {\r\n            let start = pos - padding;\r\n            let end = pos + padding;\r\n            src =  (start > 0 ? '... ' : '') + src.substring(start, end) + (end < src.length ? ' ...' : '');\r\n            effPos = (start > 0) ? padding + (start > 0 ? 4 : 0) : pos;\r\n        }\r\n\r\n        str += `\\n> ${src}\\n`\r\n\r\n        str += '  ' + (effPos > 0 ? '┌' : '│') + '─'.repeat(effPos < 0 ? 0 : effPos)  + (effPos > 0 ? '┘' : '') + '\\n'\r\n\r\n        this.errorToken && (str += `  ├ error token: ${String(this.errorToken).trim()}\\n`);\r\n        (this.position != undefined) && (str += `  ├ position: ${this.position}\\n`);\r\n        this.fix && (str += `  ├ fix: ${this.fix}\\n`);\r\n        this.note && (str += `  ├ note: ${this.note}\\n`);\r\n        str += `  └ error code: ${this.errorCode}`;\r\n        return str;\r\n    }\r\n\r\n    public toString = this.prettify();\r\n}","import LangTokenBase, {TokenType} from \"../LangTokenBase\";\r\n\r\nexport default class StringToken extends LangTokenBase<string> {\r\n    constructor(value: string) {\r\n        super(value, TokenType.STRING);\r\n    }\r\n}","import {ArrayTokenizer, getJoinedStrLength, getJoinedTknLength} from \"../../../utils/ArrayTokenizer\";\r\nimport {hasOnlyRepeatedChars} from \"../../utils/lang_utils\";\r\nimport ASLangError from \"../../errors/ASLangError\";\r\nimport ErrorCodes from \"../../errors/ErrorCodes\";\r\nimport LangTokenBase from \"../../specs/tokens/LangTokenBase\";\r\nimport {RightBracketToken} from \"../../specs/tokens/lexmes/ContainerToken\";\r\nimport Stack from \"../../../utils/Stack\";\r\n\r\n/**\r\n * A grouping of basic or unnecessary large error checking codes.\r\n * Allows the functions calling it to follow single responsibility and also reduces code cluttering\r\n */\r\nexport namespace ParserErrorChecks {\r\n    /** Checks for the tokenizing step**/\r\n    export function hasInvalidQuoteError_TK(quoteStartIndex: number, quoteEndIndex: number, str: string, beforeStr: string, afterStr: string, inputTxt: string, tokens: ArrayTokenizer<string>) {\r\n        if ((quoteStartIndex > 0 || quoteEndIndex < str.length - 1) && (\r\n            // Check if characters before and after the token contains only '(' or ')'\r\n            !(hasOnlyRepeatedChars(beforeStr) && hasOnlyRepeatedChars(afterStr)) || (\r\n                (beforeStr && beforeStr[0] !== '(') ||\r\n                (afterStr && afterStr[0] !== ')')\r\n            )\r\n        )) {\r\n            throw new ASLangError({\r\n                reason: `Error in token \\`${str.substring(quoteStartIndex, quoteEndIndex + 1)}\\`. Only spaces and delimiting characters are allowed just before or after the quotes.`,\r\n                note: `${beforeStr ? 'Found `' + beforeStr + '` before the token' : ''}; ${afterStr ? 'Found `' + afterStr + '` after the token' : ''}`,\r\n                source: inputTxt,\r\n                position: getJoinedStrLength(tokens, tokens.currIndex, 1) - str.length + quoteStartIndex,\r\n                errorCode: ErrorCodes.InvalidQuotes,\r\n                errorToken: str.substring(quoteStartIndex, quoteEndIndex + 1)\r\n            })\r\n        }\r\n    }\r\n\r\n    export function hasUnclosedQuoteError_TK(quoteStartIndex: number, quoteEndIndex: number, startsWith: string, inputTxt: string, tokens: ArrayTokenizer<string>, str: string) {\r\n        if (quoteStartIndex === quoteEndIndex)\r\n            throw new ASLangError({\r\n                reason: `\\`${startsWith}\\` was found, but not closed.`,\r\n                source: inputTxt,\r\n                position: getJoinedStrLength(tokens, tokens.currIndex, 1) - str.length + quoteStartIndex,\r\n                errorCode: ErrorCodes.UnclosedQuote,\r\n                errorToken: startsWith\r\n            })\r\n    }\r\n\r\n    export function hasInvalidBracketError_TK(curr: string, inputTxt: string, tokens: ArrayTokenizer<string>) {\r\n        // Match any '(' (any number of them) from the start.\r\n        const bracketStart = curr.match(/^\\(+/);\r\n        // Match any ')' (any number of them) from the end.\r\n        const bracketEnd = curr.match(/\\)+$/);\r\n\r\n        // Get start index and end index everything between matched bracketStart and bracketEnd\r\n        const startI = bracketStart !== null ? bracketStart[0].length : 0,\r\n            endI = bracketEnd !== null ? bracketEnd.index! : curr.length;\r\n\r\n        const str = curr.substring(startI, endI);\r\n\r\n        // Check if there are brackets b/w the startI and endI; if yes, they all are invalid; throw error.\r\n        const bracketPos = str.search(/([()])/);\r\n        if (bracketPos !== -1) {\r\n            const char = str[bracketPos];\r\n            throw new ASLangError({\r\n                reason: `Found an invalid character '${char}'. Possibly because brackets cannot appear in-between characters.`,\r\n                errorCode: ErrorCodes.InvalidBracket,\r\n                source: inputTxt,\r\n                position: getJoinedStrLength(tokens, tokens.currIndex, 1) - curr.length + startI + bracketPos,\r\n                errorToken: str,\r\n                fix: `Insert space in-between the bracket`\r\n            });\r\n        }\r\n    }\r\n\r\n    export function hasEmptyBracketError_ST(topCmd: LangTokenBase<unknown> | undefined, str: string, tokens: ArrayTokenizer<LangTokenBase<unknown>>, token: RightBracketToken) {\r\n        if (topCmd === undefined) {\r\n            throw new ASLangError({\r\n                reason: `Found empty command '()'`,\r\n                source: str,\r\n                errorToken: '()',\r\n                position: getJoinedTknLength(tokens, tokens.currIndex, 1) - (token.value as string).length - 2,\r\n                errorCode: ErrorCodes.EmptyCommand,\r\n                fix: 'Delete the empty command'\r\n            });\r\n        }\r\n    }\r\n\r\n    export function hasRougeRightBracketError_ST(stack: Stack<LangTokenBase<unknown>>, str: string, tokens: ArrayTokenizer<LangTokenBase<unknown>>, token: RightBracketToken) {\r\n        if (stack.isEmpty()) {\r\n            throw new ASLangError({\r\n                reason: `Invalid bracket, no opening bracket found`,\r\n                errorCode: ErrorCodes.InvalidBracket,\r\n                source: str,\r\n                position: getJoinedTknLength(tokens, tokens.currIndex, 1) - (token.value as string).length,\r\n                errorToken: ')',\r\n            })\r\n        }\r\n    }\r\n\r\n    export interface I_BracketTrack {\r\n        value: string,\r\n        tokenPos: number\r\n    }\r\n\r\n    export function hasRougeLeftBracketError_ST(bracketTrack: Stack<I_BracketTrack>, tokens: ArrayTokenizer<LangTokenBase<unknown>>, str: string) {\r\n        if (!bracketTrack.isEmpty()) {\r\n            let top = bracketTrack.pop()!;\r\n            throw new ASLangError({\r\n                reason: `Invalid bracket, no closing bracket found`,\r\n                position: getJoinedTknLength(tokens, top.tokenPos, 1) - top.value.length,\r\n                source: str,\r\n                errorToken: top.value,\r\n                errorCode: ErrorCodes.InvalidBracket,\r\n            })\r\n        }\r\n    }\r\n}","import LangTokenBase from \"../../specs/tokens/LangTokenBase\";\r\nimport ContainerToken from \"../../specs/tokens/lexmes/ContainerToken\";\r\nimport {convertToPossibleType} from \"../../utils/lang_utils\";\r\n\r\n/**\r\n * Takes in the partial parsed output and then does some preprocess to it.\r\n * Like conversion of base tokens to its matching token type.\r\n * NOTE: Use this only for the first pass of the raw token data.\r\n */\r\nexport default function preprocessor(tokensIn: LangTokenBase<unknown>[]) {\r\n    return tokensIn.map((token) => {\r\n        if(token instanceof ContainerToken)\r\n            return token;\r\n\r\n        return convertToPossibleType(token);\r\n    })\r\n}","import {ArrayTokenizer} from \"../../../utils/ArrayTokenizer\";\r\nimport ASLangError from \"../../errors/ASLangError\";\r\nimport ErrorCodes from \"../../errors/ErrorCodes\";\r\nimport LangTokenBase from \"../../specs/tokens/LangTokenBase\";\r\nimport StringToken from \"../../specs/tokens/lexmes/StringToken\";\r\nimport {LeftBracketToken, RightBracketToken} from \"../../specs/tokens/lexmes/ContainerToken\";\r\nimport {ParserErrorChecks} from \"./ParserErrorChecks\";\r\nimport preprocessor from \"./preprocessor\";\r\n\r\n\r\n/**\r\n * Splits a string based on parenthesis and converts each to a token\r\n */\r\nfunction tokenizeParens(str: string): LangTokenBase<unknown>[] {\r\n    return str.split(/([()])/).filter((val) => val).map(e => {\r\n        if(e === \")\")\r\n            return new RightBracketToken();\r\n        else if(e === \"(\")\r\n            return new LeftBracketToken();\r\n\r\n        return new StringToken(e);\r\n    });\r\n}\r\n\r\n\r\n/** Takes in a string and splits it into tokens and return an array of tokens.\r\n * This does steps like: quote matching, bracket matching.\r\n *\r\n * Check parse error like invalid quotes, invalid brackets, etc.\r\n * @throws ASLangError\r\n **/\r\nexport function parser(inputTxt: string): LangTokenBase<unknown>[] {\r\n    const tokens = new ArrayTokenizer(inputTxt.split(' '));\r\n    const parsedTokens: LangTokenBase<unknown>[] = [];\r\n\r\n    // If the input string is empty, then throw an error.\r\n    if (inputTxt === '')\r\n        throw new ASLangError({reason: \"Empty string.\", source: inputTxt, errorCode: ErrorCodes.FoundNullToken})\r\n\r\n    while (tokens.hasMoreTokens()) {\r\n        let curr = tokens.nextToken() || '';\r\n\r\n        // NOTE: DQ = Double Quote, SQ = Single Quote\r\n        const startIndexDQ = curr.indexOf(`\"`);\r\n        const startIndexSQ = startIndexDQ === -1 ? curr.indexOf(`'`) : startIndexDQ;\r\n\r\n        // Checks if the string starts with a quote, and if so, groups the string together until the next quote.\r\n        if (startIndexDQ !== -1 || startIndexSQ !== -1) {\r\n            // Finds the index of the first quote, and what quote it is.\r\n            const startIndex = startIndexDQ === -1 ? startIndexSQ : startIndexDQ;\r\n            const startsWith: string = startIndexDQ === -1 ? `'` : `\"`;\r\n            let str: string = '';\r\n\r\n            const initialIndex = tokens.currIndex;\r\n            // Loops through the string until it finds the next quote; the next quote could be anywhere in the string.\r\n            while (tokens.hasMoreTokens() &&\r\n                curr!.indexOf(startsWith, tokens.currIndex === initialIndex ? startIndex + 1 : 0) === -1\r\n                ) {\r\n                str = str.concat(curr + ' ');\r\n                curr = tokens.nextToken() || '';\r\n            }\r\n            // Adds the last token to the string.\r\n            str = str.concat(curr!);\r\n\r\n            const quoteStartIndex = str.indexOf(startsWith);\r\n            const quoteEndIndex = str.lastIndexOf(startsWith);\r\n\r\n            // ERROR Check: If the quote is not closed, then throw an error.\r\n            ParserErrorChecks.hasUnclosedQuoteError_TK(quoteStartIndex, quoteEndIndex, startsWith, inputTxt, tokens, str);\r\n\r\n            const beforeStr = str.substring(0, quoteStartIndex),\r\n                afterStr = str.substring(quoteEndIndex + 1);\r\n\r\n            // ERROR Check: If there is anything before or after the quote, then throw an error.\r\n            ParserErrorChecks.hasInvalidQuoteError_TK(quoteStartIndex, quoteEndIndex, str, beforeStr, afterStr, inputTxt, tokens);\r\n\r\n            // If there is anything before the quote, then add it to the return array and also split for parenthesis.\r\n            if (quoteStartIndex != 0)\r\n                parsedTokens.push(...tokenizeParens(beforeStr));\r\n\r\n            // Push the grouped string too; If the quotes are there, then push those too.\r\n            parsedTokens.push(new StringToken(str.substring(quoteStartIndex, quoteEndIndex + 1)));\r\n\r\n            // If there is anything after the quote, add it to the return array and split for parenthesis.\r\n            if (quoteEndIndex != str.length - 1)\r\n                parsedTokens.push(...tokenizeParens(afterStr));\r\n        } else {\r\n            // ERROR Check: If there are invalid brackets\r\n            ParserErrorChecks.hasInvalidBracketError_TK(curr, inputTxt, tokens);\r\n\r\n            // Split for parenthesis\r\n            parsedTokens.push(...tokenizeParens(curr));\r\n        }\r\n    }\r\n\r\n    return preprocessor(parsedTokens);\r\n}","import Stack from \"../../../utils/Stack\";\r\nimport LangTokenBase from \"../../specs/tokens/LangTokenBase\";\r\nimport {ArrayTokenizer} from \"../../../utils/ArrayTokenizer\";\r\nimport {LeftBracketToken, RightBracketToken} from \"../../specs/tokens/lexmes/ContainerToken\";\r\nimport CommandToken from \"../../specs/tokens/lexmes/CommandToken\";\r\nimport {parser} from \"./parser\";\r\nimport {ParserErrorChecks} from \"./ParserErrorChecks\";\r\nimport I_BracketTrack = ParserErrorChecks.I_BracketTrack;\r\n\r\n\r\n/**\r\n * Takes in a string of text, tokenizes it and then creates the syntax tree and returns a CommandToken,\r\n * which is the root node and contains all the other components as it's child element.\r\n *\r\n * Output e.g.:\r\n * CommandToken {\r\n *     name,\r\n *     params: [\r\n *         BaseTokens...\r\n *     ]\r\n * }\r\n */\r\nexport default function generateSyntaxTree(str: string) {\r\n    const tk = parser(str);\r\n\r\n    const tokens = new ArrayTokenizer<LangTokenBase<unknown>>(tk);\r\n    const stack = new Stack<LangTokenBase<unknown>>();\r\n\r\n    // For keeping track of brackets to check for errors.\r\n    const bracketTrack = new Stack<I_BracketTrack>();\r\n\r\n    while (tokens.hasMoreTokens()) {\r\n        const token = tokens.nextToken();\r\n\r\n        if (token === null)\r\n            continue;\r\n\r\n        if (token instanceof LeftBracketToken) {\r\n            stack.push(token);\r\n            bracketTrack.push({value: token.value as string, tokenPos: tokens.currIndex});\r\n        } else if (token instanceof RightBracketToken) {\r\n            let cmd = new CommandToken('', []);\r\n            const tempStack = new Stack<LangTokenBase<unknown>>();\r\n\r\n            while (!stack.isEmpty() && !(stack.peek() instanceof LeftBracketToken))\r\n                tempStack.push(stack.pop()!);\r\n\r\n            // ERROR Check; If the stack is empty throw;\r\n            ParserErrorChecks.hasRougeRightBracketError_ST(stack, str, tokens, token);\r\n\r\n            bracketTrack.pop();\r\n            stack.pop();\r\n\r\n            const topCmd = tempStack.pop();\r\n\r\n            // ERROR Check: is the command empty?\r\n            ParserErrorChecks.hasEmptyBracketError_ST(topCmd, str, tokens, token);\r\n\r\n\r\n            // TODO Check if the tempStack's top is a command, if then the `cmd` is an eval command;\r\n            // if (!(topCmd instanceof StringToken))\r\n            //     throw new ASLangError({\r\n            //         reason: \"This is a TODO; The command name is taken as the first token inside brackets and they must be strings too\",\r\n            //         errorCode: ErrorCodes.PlaceholderError,\r\n            //         source: str,\r\n            //     })\r\n            if (topCmd instanceof CommandToken)\r\n                cmd = new CommandToken(\"eval\", [topCmd], true); // Internally generated command\r\n            else\r\n                cmd.changeName(topCmd!.value as string);\r\n\r\n            while (!tempStack.isEmpty()) {\r\n                cmd.appendParam(tempStack.pop()!);\r\n            }\r\n            stack.push(cmd);\r\n\r\n        } else {\r\n            stack.push(token);\r\n        }\r\n    }\r\n\r\n    // ERROR Check; Are any brackets not closed?\r\n    ParserErrorChecks.hasRougeLeftBracketError_ST(bracketTrack, tokens, str);\r\n\r\n    const arr = stack.toArray();\r\n    const topCmd = arr[0];\r\n    let cmd;\r\n\r\n    // If the top most item is a command and not a string, then encapsulate it in an eval command;\r\n    if (topCmd instanceof CommandToken)\r\n        cmd = new CommandToken(\"eval\", [topCmd], true); // Internally generated command\r\n    else\r\n        cmd = new CommandToken(arr[0]!.value as string, []);\r\n\r\n\r\n    for (let i = 1; i < arr.length; i++) {\r\n        cmd.appendParam(arr[i]!);\r\n    }\r\n\r\n    return cmd;\r\n}","import CommandToken from \"../specs/tokens/lexmes/CommandToken\";\r\nimport LangTokenBase from \"../specs/tokens/LangTokenBase\";\r\n\r\n/**\r\n * Draws a vertical line for the AST display\r\n * @param level\r\n * @param sep\r\n * @constructor\r\n */\r\nfunction drawVerLine(level: number, sep: string = \"  \") {\r\n    let str = ' ';\r\n    for (let i = 0; i < level; i++)\r\n        str +=  sep;\r\n\r\n    return str;\r\n}\r\n\r\n/**\r\n * Takes in a base token (the generated syntax tree) and then displays the AST with the error token highlighted.\r\n * @param base\r\n * @param errorAT If this is used to show the error token, then this is the tokenID of the error token.\r\n * @constructor\r\n */\r\nexport function ASTDisplay(base: LangTokenBase<unknown>, errorAT?: string) {\r\n    let str = ''\r\n\r\n    function ASTErrorDisplay(base: LangTokenBase<unknown>, level: number = 0, sep: string = \"  \") {\r\n        const isError = base.tokenID === errorAT;\r\n        if (base instanceof CommandToken) {\r\n            str += drawVerLine(level, sep) + (level > 0 ? '├>' : '└> ') + base.value + (base.isInternal ? ` [internal]` : '') + (isError ? ' <-- Here' : '') + '\\n';\r\n\r\n            for (let i of base.params)\r\n                ASTErrorDisplay(i, level + 1, sep);\r\n\r\n        } else\r\n            str += drawVerLine(level, sep) + '├ ' + base.value + (isError ? ' <-- Here' : '') + '\\n';\r\n    }\r\n\r\n    ASTErrorDisplay(base);\r\n    return str.trim();\r\n}","import ASBaseError from \"./ASBaseError\";\r\nimport LangTokenBase from \"../specs/tokens/LangTokenBase\";\r\nimport {T_InitialState} from \"../interpreter/runner/runCommand\";\r\nimport {ASTDisplay} from \"../utils/ASTDisplay\";\r\n\r\ninterface I_ErrorData {\r\n    /** The initial state of the command. i.e., contains the root command and original execution string */\r\n    state: T_InitialState,\r\n    /** The command where the error occurred */\r\n    occurredCmd: LangTokenBase<any>,\r\n}\r\n\r\n/**\r\n * An error class that represents an error that occurred during runtime.\r\n */\r\nexport default class ASRuntimeError extends ASBaseError {\r\n    private data: I_ErrorData | null;\r\n\r\n    /**\r\n     * Creates an instance of ASRuntimeError.\r\n     * @param message\r\n     * @param data\r\n     */\r\n    constructor(message: string, data: I_ErrorData | null) {\r\n        super(message);\r\n        this.data = data;\r\n    }\r\n\r\n    public prettify(): string {\r\n        return `${this.name}\r\nReason: ${this.message}\r\n\r\n${this.data?.state.originalStr}\r\n${ASTDisplay(this.data!.state.rootToken, this.data!.occurredCmd.tokenID)}\r\n`\r\n    }\r\n}","import LangTokenBase from \"../../specs/tokens/LangTokenBase\";\r\nimport Parameters from \"../../specs/lang-units/Parameters\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport CommandToken from \"../../specs/tokens/lexmes/CommandToken\";\r\nimport NumberToken from \"../../specs/tokens/lexmes/NumberToken\";\r\nimport BooleanToken from \"../../specs/tokens/lexmes/BooleanToken\";\r\nimport StringToken from \"../../specs/tokens/lexmes/StringToken\";\r\n\r\ntype T_ArgCheck = {\r\n    success: boolean,\r\n    foundType?: DataType,\r\n    /** If the type is command, then don't execute; pass it forward as a function to call*/\r\n    lazyEval?: boolean\r\n}\r\n\r\n/**\r\n * Utility function that checks if a token provided matches with the rules of Parameter.\r\n * @param token The token to be checked\r\n * @param params the Parameter object of a Command\r\n * @param index the current index of the token\r\n */\r\nexport function hasProperArgType(token: LangTokenBase<unknown>, params: Parameters, index: number): T_ArgCheck {\r\n    let type: DataType;\r\n\r\n    /** If the index is greater than param lengths, then assume the remaining types to be the last parameter type*/\r\n    if (index > params.getParamsLen - 1)\r\n        type = params.lastParam;\r\n    else\r\n        type = params.types[index]!;\r\n\r\n    if (type === DataType.any)\r\n        return {success: true}\r\n\r\n    //If the type required is command but token is not a CommandToken then return false\r\n    if (type === DataType.command && !(token instanceof CommandToken))\r\n        return {\r\n            success: false,\r\n            foundType: type,\r\n        }\r\n\r\n    if (type === DataType.command && token instanceof CommandToken) {\r\n        return {\r\n            success: true,\r\n            foundType: type,\r\n            lazyEval: true\r\n        }\r\n    }\r\n\r\n    if (token instanceof NumberToken && type != DataType.number)\r\n        return {\r\n            success: true,\r\n            foundType: type,\r\n        }\r\n\r\n    if (token instanceof BooleanToken && type != DataType.boolean)\r\n        return {\r\n            success: true,\r\n            foundType: type,\r\n        }\r\n\r\n\r\n    return {\r\n        success: !(token instanceof StringToken && type != DataType.string),\r\n        foundType: type\r\n    }\r\n}","import CommandToken from \"../../specs/tokens/lexmes/CommandToken\";\r\nimport ASRuntimeError from \"../../errors/ASRuntimeError\";\r\nimport {hasProperArgType} from \"./hasProperArgType\";\r\nimport AssistScript from \"../../AssistScript\";\r\nimport LangTokenBase from \"../../specs/tokens/LangTokenBase\";\r\nimport Command from \"../../specs/lang-units/Command\";\r\nimport Parameters from \"../../specs/lang-units/Parameters\";\r\n\r\nexport type T_InitialState = {\r\n    rootToken: CommandToken,\r\n    originalStr: string\r\n};\r\n\r\n/** The function that actually executes the command.\r\n * This is extracted out to a separate function, because if a command is lazily evaluated,\r\n * then this a call to this function is enclosed in an anonymous function, which will be called on demand.\r\n *\r\n * For eg:\r\n ```\r\n (set i 0)\r\n    (while (TRUE) (\r\n    (print i = (get i) ; i + 1 = (add (get i) 1))\r\n    (incr i)\r\n )\r\n ```\r\n * Previously, the `get i` and `add (get i) 1` would be evaluated immediately,\r\n * but now it will be evaluated only when the `print` command is executed.\r\n * And the print will only be executed when the while loop is executed.\r\n **/\r\nfunction execCmd(actualParams: LangTokenBase<unknown>[], defParams: Parameters, initial: T_InitialState, context: AssistScript, commandDef: Command) {\r\n    // Goes through the actual arguments and evaluates it, and then returns an array of final values.\r\n    const finalParam = actualParams.map((token, index) => {\r\n        const checkParams = hasProperArgType(token, defParams, index);\r\n        if (!checkParams.success) {\r\n            throw new ASRuntimeError(`The argument '${token.value}' doesn't match the required type\\nRequired: ${checkParams.foundType}\\nFound: ${token.type.substring(6).toLowerCase()}`, {\r\n                state: initial,\r\n                occurredCmd: token\r\n            });\r\n        }\r\n\r\n        if (token instanceof CommandToken) {\r\n            return runCommand(token, context, initial, checkParams.lazyEval);\r\n        }\r\n\r\n        return token.value;\r\n    });\r\n\r\n\r\n    return commandDef.exec(context.contextProvider, ...finalParam);\r\n}\r\n\r\n/**\r\n * The actual implementation of the runner method.\r\n * A recursive method that goes through each command and its arguments.\r\n * Also, responsible for argument type validation\r\n * @param inputTkn The command to execute\r\n * @param context The command store instance\r\n * @param initial Used for better error reporting.\r\n * @param lazyEval If the command expects a command and now a value then don't execute it, pass it forward.\r\n * Contains the original string and the root token\r\n */\r\nexport function runCommand(inputTkn: CommandToken, context: AssistScript, initial: T_InitialState, lazyEval?: boolean): unknown {\r\n    const commandDef = context.store.getCommand(inputTkn.commandName);\r\n\r\n    // Used to keep track of the current execution, for better errors.\r\n    context.contextProvider.currentCommand = inputTkn;\r\n    context.contextProvider.currentState = initial;\r\n\r\n    if (!commandDef) {\r\n        throw new ASRuntimeError(`Command '${inputTkn.commandName}' not found.`, {\r\n            state: initial,\r\n            occurredCmd: inputTkn\r\n        });\r\n    }\r\n\r\n    const actualParams = inputTkn.params;\r\n    const defParams = commandDef.params;\r\n\r\n    // Check if the command got the correct number of arguments\r\n    if (!defParams.isVariable && actualParams.length !== defParams.num) {\r\n        throw new ASRuntimeError(`The command '${inputTkn.commandName}' expects ${defParams.num} arguments, but found ${actualParams.length}.`, {\r\n            state: initial,\r\n            occurredCmd: inputTkn\r\n        });\r\n    }\r\n    // If no of args is -2 (that means at least one should be present) and no arg is found throw error;\r\n    if (defParams.isVariable && defParams.num === -2 && actualParams.length === 0) {\r\n        throw new ASRuntimeError(`The command '${inputTkn.commandName}' expects at least one argument. But none found.`, {\r\n            state: initial,\r\n            occurredCmd: inputTkn\r\n        });\r\n    }\r\n\r\n\r\n    // If the command is lazyEval, then return a function that will execute the command\r\n    if (lazyEval)\r\n        return () => execCmd(actualParams, defParams, initial, context, commandDef);\r\n\r\n    return execCmd(actualParams, defParams, initial, context, commandDef);\r\n}\r\n","import generateSyntaxTree from \"../parser/generateSyntaxTree\";\r\nimport {runCommand} from \"./runCommand\";\r\nimport AssistScript from \"../../AssistScript\";\r\n\r\nfunction prettifyString(str: string) {\r\n    /** Removes extra spaces and newlines from the string, but ignores spaces between quotes. Double quotes ONLY */\r\n    return str.trim().replace(/\\s+/g, ' ');\r\n}\r\n\r\n/**\r\n * The command runner class.\r\n * Responsible for providing the runtime.\r\n * Provides a static method to run a command string.\r\n */\r\nexport default class Runner {\r\n    /** Takes in a string and runs it and returns the value of the command\r\n     * @throws ASRuntimeError\r\n     */\r\n    public static run(str: string, asInstance: AssistScript): unknown {\r\n        str = prettifyString(str);\r\n        const ast = generateSyntaxTree(str);\r\n        return runCommand(ast, asInstance, {rootToken: ast, originalStr: str});\r\n    }\r\n}","import DataType from \"../specs/tokens/DataType\";\r\nimport {getRoughType} from \"../utils/lang_utils\";\r\n\r\nexport interface I_Var {\r\n    value: unknown | unknown[],\r\n    type: DataType,\r\n}\r\n\r\nexport interface I_Arr {\r\n    value: unknown[],\r\n}\r\n\r\n/**\r\n * A service that handles the storage of variables.\r\n *\r\n * It does;\r\n *      - Store variables\r\n *      - Retrieve variables\r\n *      - Update variables\r\n *      - Delete variables\r\n *      - Check if a variable exists\r\n *\r\n * @internal\r\n */\r\nexport default class VariableStore {\r\n    private readonly var_store = new Map<string, I_Var>();\r\n    private readonly array_store = new Map<string, I_Arr>();\r\n\r\n    /** Sets a new variable or updates an existing one\r\n     * @param name The name of the variable (naming conventions should follow the rules of a valid variable name)\r\n     * @param value The value of the variable\r\n     * @param type The type of the variable [Optional: If not specified it is found automatically]\r\n     */\r\n    setVariable(name: string, value: unknown, type?: DataType): void {\r\n        let calcT = type || getRoughType(value);\r\n        this.var_store.set(name, {value, type: calcT});\r\n    }\r\n\r\n    /**Sets array variable\r\n     * @param name The name of the array\r\n     * (naming conventions should follow the rules of a valid variable name - not enforced here)\r\n     * @param value The value of the array\r\n     * @internal\r\n     * */\r\n    setArray(name: string, value: unknown[]): void {\r\n        this.array_store.set(name, {value});\r\n    }\r\n\r\n    /**\r\n     * Returns the variable if it exists else undefined.\r\n     */\r\n    getVariable(name: string): I_Var | undefined {\r\n        return this.var_store.get(name);\r\n    }\r\n\r\n    /**\r\n     * Returns the array if it exists else undefined.\r\n     */\r\n    getArray(name: string): I_Arr | undefined {\r\n        return this.array_store.get(name);\r\n    }\r\n\r\n    // /**\r\n    //  * Updates an array if it exists.\r\n    //  * Does\r\n    //  *  - Check if the array exists\r\n    //  *  - Check if the index is within bounds\r\n    //  *  - Update the array\r\n    //  * @param name The name of the variable\r\n    //  * @param index The index of the array to be updated\r\n    //  * @param value The new value\r\n    //  */\r\n    // updateArray(name: string, index: number, value: unknown): { success: boolean, message?: string } {\r\n    //     if (!this.array_store.has(name))\r\n    //         return {\r\n    //             success: false,\r\n    //             message: `Array ${name} does not exist.`,\r\n    //         }\r\n    //\r\n    //     const arr = this.array_store.get(name)!;\r\n    //     if(index < 0 || index >= arr.value.length)\r\n    //         return {\r\n    //             success: false,\r\n    //             message: `Index ${index} is out of bounds.`,\r\n    //         }\r\n    //\r\n    //     arr.value[index] = value;\r\n    //     this.array_store.set(name, {\r\n    //         value: arr.value,\r\n    //         type: getRoughArrayType(arr.value),\r\n    //     })\r\n    //\r\n    //     return {\r\n    //         success: true,\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * Appends a value to the end of an array if it exists.\r\n     * Does\r\n     *  - Check if the array exists\r\n     *  - Append the value to the array\r\n     * @param name\r\n     * @param value\r\n     */\r\n    appendToArray(name: string, value: unknown): { success: boolean, message?: string } {\r\n        if (!this.array_store.has(name))\r\n            return {\r\n                success: false,\r\n                message: `Array ${name} does not exist.`,\r\n            }\r\n\r\n        const arr = this.array_store.get(name)!;\r\n        arr.value.push(value);\r\n        this.array_store.set(name, {\r\n            value: arr.value,\r\n        })\r\n\r\n        return {\r\n            success: true,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a variable or an array from the store.\r\n     */\r\n    deleteVariable(name: string) {\r\n        return this.var_store.delete(name);\r\n    }\r\n\r\n    /** Deletes an array from the store*/\r\n    deleteArray(name: string){\r\n        return this.array_store.delete(name);\r\n    }\r\n}\r\n","import VariableStore from \"./VariableStore\";\r\nimport CommandToken from \"../specs/tokens/lexmes/CommandToken\";\r\nimport {T_InitialState} from \"../interpreter/runner/runCommand\";\r\n\r\ninterface STDOUT {\r\n    print: typeof console.log\r\n}\r\n\r\n/**\r\n * Context provider provides the provisions to access internal, external or custom services.\r\n *\r\n * The default AssistScript class has the BaseContextProvider as the default context provider.\r\n * If the user wants to use custom services, they can extend this class and provide the necessary services.\r\n * Which then can be used inside user-created commands.\r\n *\r\n * @see [how to create custom commands](/docs/Create-custom-commands.md)\r\n */\r\nexport default class    BaseContextProvider {\r\n    readonly stdout: STDOUT = {print: console.log};\r\n\r\n    /** No of times a loop can run */\r\n    readonly LOOP_LIMIT: number = 200;\r\n    /** Used for loop controls*/\r\n    isBreakCalled: boolean = false;\r\n    isContinueCalled: boolean = false;\r\n    /** Used to check if the interpreter is in a loop statement*/\r\n    isInLoop: boolean = false;\r\n\r\n    /** A service that handles the storage of variables. */\r\n    readonly storeService: VariableStore = new VariableStore();\r\n\r\n    /** Keep track of the current running command and the current root command*/\r\n    private currCmd: CommandToken | null = null;\r\n    private currState: T_InitialState | null = null;\r\n\r\n    get currentCommand() {\r\n        return this.currCmd;\r\n    }\r\n\r\n    set currentCommand(cmd) {\r\n        this.currCmd = cmd;\r\n    }\r\n\r\n    get currentState() {\r\n        return this.currState;\r\n    }\r\n\r\n    set currentState(state) {\r\n        this.currState = state;\r\n    }\r\n\r\n}","/** Represents unit documentation of a command; each command has a `Documentation` object associated with it.\r\n * Used for displaying help and other docs related stuff.\r\n */\r\nexport default class Documentation {\r\n    readonly title;\r\n    readonly aliases;\r\n    readonly body;\r\n    readonly syntax;\r\n    readonly example;\r\n    readonly note;\r\n    category: string | null = null;\r\n\r\n    constructor(title: string, aliases: string[], body: string, syntax: string, example?: string, note?: string) {\r\n        this.title = title;\r\n        this.aliases = aliases;\r\n        this.body = body;\r\n        this.syntax = syntax;\r\n        this.example = example || null;\r\n        this.note = note || null;\r\n    }\r\n}\r\n\r\n","import DataType from \"../tokens/DataType\";\r\nimport ASMakeError from \"../../errors/ASMakeError\";\r\n\r\n/**\r\n * Represents a parameter to a command\r\n *\r\n * ## RULES\r\n * 1. If no of parameters is negative,\r\n *    then it means that the command can take variable number of parameters.<br/>\r\n *    If no of parameters\r\n *      1. is -1, then the command can take zero to any number of parameters.\r\n *      2. is -2, then the command can take one to any number of parameters.\r\n *\r\n *    At least one parameter type should be specified.\r\n *    If more than one is provided,\r\n *    then the type checks for that many arguments will be done,\r\n *    and for the rest of the arguments the last parameter type provided will be assumed to be its type.\r\n *\r\n * 2. If no of parameters is 0, then the commands won't expect any argument.\r\n *\r\n * 3. If it is a positive number,\r\n *    then the command expects that no of parameters of the corresponding type.\r\n *    If the number of parameter types listed out is less than the number of parameters expected,\r\n *    then the arguments are checked against the provided ones\r\n *    and for the rest of them the last parameter type is assumed to be type for the rest of the arguments\r\n *\r\n * If any of these fail, an error will be thrown.\r\n * @throws ASMakeError\r\n */\r\nexport default class Parameters {\r\n    readonly types: DataType[] = [];\r\n    /** The number of parameters*/\r\n    readonly num;\r\n\r\n    /** If the command can have variable no of arguments*/\r\n    readonly isVariable: boolean = false;\r\n    /** The last parameter type. Useful for rule 1 and 2*/\r\n    readonly lastParam: DataType;\r\n\r\n    /** Gets the number of parameters given*/\r\n    get getParamsLen() {\r\n        return this.types.length;\r\n    }\r\n\r\n    /**\r\n     * @param num Number of parameters\r\n     * @param params The parameter types listed out\r\n     */\r\n    constructor(num: number, ...params: DataType[]) {\r\n        if(params.length === 0 && num === -2)\r\n            throw new ASMakeError(`The command expects at least one parameter. But none found.`);\r\n\r\n        if(num > -1 && params.length > num)\r\n            throw new ASMakeError(`The command expects ${num} parameter(s), but found more than enough parameters (${params.length})`);\r\n\r\n        this.types = params;\r\n        this.num = num;\r\n\r\n        if(num <= -1)\r\n            this.isVariable = true;\r\n\r\n        this.lastParam = this.types[this.types.length - 1] || DataType.any;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import Documentation from \"./Documentation\";\r\nimport Parameters from \"./Parameters\";\r\nimport DataType from \"../tokens/DataType\";\r\n\r\nimport {CmdExec} from \"../../utils/lang_types\";\r\n\r\n/**\r\n * The representation of a Command in AssistScript\r\n * This holds all the information about a command,\r\n * contains the names (+aliases), documentation, argument info and how to execute.\r\n */\r\nexport default class Command {\r\n    /** The names of the command; Can contain manny names (aliases) */\r\n    names: string[];\r\n    docs: Documentation;\r\n    params: Parameters;\r\n    returnType: DataType;\r\n    exec;\r\n\r\n    /**\r\n     * @param names Array containing the name and aliases of the command\r\n     * @param docs The documentation of the command\r\n     * @param params\r\n     * @param returnType The return type of the command\r\n     * @param exec The function to execute when the command is called\r\n     */\r\n    constructor(names: string[], docs: Documentation, params: Parameters, returnType: DataType, exec: CmdExec) {\r\n        this.names = names;\r\n        this.docs = docs;\r\n        this.params = params;\r\n        this.returnType = returnType;\r\n        this.exec = exec;\r\n    }\r\n}","import Documentation from \"./lang-units/Documentation\";\r\nimport Parameters from \"./lang-units/Parameters\";\r\nimport DataType from \"./tokens/DataType\";\r\nimport ASMakeError from \"../errors/ASMakeError\";\r\nimport Command from \"./lang-units/Command\";\r\n\r\nimport {CmdExec} from \"../utils/lang_types\";\r\n\r\n/**\r\n * A builder class that builds and returns new command.\r\n *\r\n * This command should then be added to the command store, or do something else with it.\r\n */\r\nexport class CommandBuilder {\r\n    private _names: string[] | null = null;\r\n    private _docs: Documentation | null = null\r\n    private _args: Parameters | null = null;\r\n    private _returnType: DataType | null = null;\r\n    private _exec: CmdExec | null = null;\r\n    private readonly _category: string | null = null;\r\n\r\n    /**\r\n     * @param category An optional param; used for categorizing the command\r\n     */\r\n    constructor(category?: string) {\r\n        this._category = category || null;\r\n    }\r\n\r\n    /**Adds the name and aliases(if it exists); REQUIRED*/\r\n    names(...names: string[]) {\r\n        this._names = names;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the documentation for the command; REQUIRED\r\n     * @param title title or heading of the command\r\n     * @param aliases aliases of the command\r\n     * @param body body of the command\r\n     * @param syntax syntax of the command\r\n     * @param example example of the command [optional]\r\n     * @param note note of the command [optional]\r\n     */\r\n    directDocs(title: string, aliases: string[] | null, body: string, syntax: string, example?: string, note?: string) {\r\n        this._docs = new Documentation(title, aliases || [], body, syntax, example, note);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Same as `directDocs` but takes a `Documentation` object. Can be used with `DocsBuilder`\r\n     * @param docs\r\n     */\r\n    docs(docs: Documentation) {\r\n        this._docs = docs;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the arguments for the command; REQUIRED\r\n     * @param num number of arguments\r\n     * @param params the parameter types listed out\r\n     */\r\n    args(num: number, ...params: DataType[]) {\r\n        this._args = new Parameters(num, ...params);\r\n        return this;\r\n    }\r\n\r\n    /**Return type; REQUIRED*/\r\n    returnType(returnType: DataType) {\r\n        this._returnType = returnType;\r\n        return this;\r\n    }\r\n\r\n    /**The code to execute when this command is called; REQUIRED*/\r\n    run(exec: CmdExec) {\r\n        this._exec = exec;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds the command; REQUIRED\r\n     * @throws ASMakeError If the required properties are not specified*/\r\n    build() {\r\n        if (!this._names)\r\n            throw new ASMakeError('Command name(s) not specified.');\r\n\r\n        if (!this._docs)\r\n            throw new ASMakeError('Command documentation not specified.');\r\n\r\n        if (!this._args)\r\n            throw new ASMakeError('Command arguments not specified.');\r\n\r\n        if (!this._exec)\r\n            throw new ASMakeError('Command execution function not specified.');\r\n\r\n        if (!this._returnType)\r\n            throw new ASMakeError('Command return type not specified.');\r\n\r\n        if (this._category)\r\n            this._docs.category = this._category;\r\n\r\n        const cmd = new Command(this._names, this._docs, this._args, this._returnType, this._exec);\r\n        this.reset();\r\n        return cmd;\r\n    }\r\n\r\n    reset() {\r\n        this._names = null;\r\n        this._docs = null\r\n        this._args = null;\r\n        this._returnType = null;\r\n        this._exec = null;\r\n    }\r\n}","import ASMakeError from \"../errors/ASMakeError\";\r\nimport Documentation from \"./lang-units/Documentation\";\r\n\r\nexport class DocsBuilder {\r\n    private title1: string | null = null;\r\n    private aliases1: string[] = [];\r\n    private body1: string | null = null;\r\n    private syntax1: string | null = null;\r\n    private example1: string | null = null;\r\n    private note1: string | null = null;\r\n\r\n    /** The title or name of the command; REQUIRED*/\r\n    name(title: string): DocsBuilder {\r\n        this.title1 = title;\r\n        return this;\r\n    }\r\n\r\n    /** The aliases (if it exists) of the command; OPTIONAL*/\r\n    aliases(...aliases: string[]): DocsBuilder {\r\n        this.aliases1 = aliases;\r\n        return this;\r\n    }\r\n\r\n    /** The description of the command; REQUIRED*/\r\n    description(body: string): DocsBuilder {\r\n        this.body1 = body;\r\n        return this;\r\n    }\r\n\r\n    /** The basic syntax of the command; REQUIRED*/\r\n    syntax(syntax: string): DocsBuilder {\r\n        this.syntax1 = syntax;\r\n        return this;\r\n    }\r\n\r\n    /** The basic example showing how to use the command; REQUIRED*/\r\n    example(example: string): DocsBuilder {\r\n        this.example1 = example;\r\n        return this;\r\n    }\r\n\r\n    /** The notes or special information to be shown; OPTIONAL*/\r\n    note(note: string): DocsBuilder {\r\n        this.note1 = note;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds the documentation object\r\n     * This should be called only on the final step.\r\n     * @throws {ASMakeError} If any of the required fields are not set\r\n     */\r\n    build(): Documentation {\r\n        if (this.title1 === null)\r\n            throw new ASMakeError(\"Title is a required field for documentation, it is not set\");\r\n\r\n        if (this.body1 === null)\r\n            throw new ASMakeError(\"Body is a required field for documentation, it is not set\");\r\n\r\n        if (this.syntax1 === null)\r\n            throw new ASMakeError(\"Syntax is a required field for documentation, it is not set\");\r\n\r\n        if (this.example1 === null)\r\n            throw new ASMakeError(\"Example is a required field for documentation, it is not set\");\r\n\r\n        return new Documentation(this.title1, this.aliases1, this.body1, this.syntax1, this.example1, this.note1 || undefined);\r\n    }\r\n}","/** A list of ASCII characters used for drawing the command line interface. */\r\n\r\nexport const ASCII_tl_corner = '┌';\r\nexport const ASCII_tr_corner = '┐';\r\nexport const ASCII_bl_corner = '└';\r\nexport const ASCII_br_corner = '┘';\r\nexport const ASCII_vertical = '│';\r\nexport const ASCII_horizontal = '─';\r\nexport const ASCII_cross = '┼';\r\nexport const ASCII_t_cross = '┬';\r\nexport const ASCII_b_cross = '┴';\r\nexport const ASCII_l_cross = '├';\r\nexport const ASCII_r_cross = '┤';\r\nexport const ASCII_space = ' ';","import Command from \"../../specs/lang-units/Command\";\r\nimport {ASCII_horizontal, ASCII_l_cross, ASCII_tl_corner} from \"../../../utils/ASCII_char\";\r\n\r\nexport function prettyHelp(cmd: Command) {\r\n    const docs = cmd.docs;\r\n    let str = '\\n ' + docs.title + ' \\n';\r\n\r\n    str += ASCII_tl_corner + ASCII_horizontal.repeat(docs.title.length + 1) + '\\n';\r\n    docs.aliases.length > 0 && (str += `${ASCII_l_cross} Aliases: ${docs.aliases.join(', ')}\\n`)\r\n\r\n    str += ASCII_l_cross + ' ' + docs.body + '\\n';\r\n    str += ASCII_l_cross + ' Syntax: ' + docs.syntax + '\\n';\r\n    docs.example && (str += ASCII_l_cross + ' Example: ' + docs.example + '\\n');\r\n    docs.note && (str += ASCII_l_cross + ' Note: ' + docs.note + '\\n');\r\n\r\n    return str;\r\n}","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\nimport {prettyHelp} from \"./utils\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Basic Commands\");\r\n\r\n// TEST\r\nstore.addCommand(builder\r\n    .names('test')\r\n    .directDocs('test', null, 'A test command to check if AssistScript is working', 'test', 'test')\r\n    .args(0)\r\n    .returnType(DataType.string)\r\n    .run(() => 'AssistScript is working!')\r\n    .build()\r\n);\r\n\r\n// PRINT\r\nstore.addCommand(builder\r\n    .names('print', 'p', 'display', 'show', 'echo', 'log')\r\n    .docs(new DocsBuilder()\r\n        .name('print')\r\n        .aliases('p', 'display', 'show', 'echo', 'log')\r\n        .description('Prints the given message to the stdout')\r\n        .syntax('print <message>')\r\n        .example('print \"Hello, world!\"')\r\n        .build())\r\n    .args(-2, DataType.string)\r\n    .returnType(DataType.void)\r\n    .run((_, ...args) => {\r\n        _.stdout.print(args.join(' '));\r\n    })\r\n    .build()\r\n)\r\n\r\n// HELP\r\nstore.addCommand(builder\r\n    .names('help', 'h')\r\n    .docs(new DocsBuilder()\r\n        .name('help')\r\n        .aliases('h')\r\n        .description('Displays the help message for the given command.')\r\n        .syntax('help <command>')\r\n        .example('help print')\r\n        .build())\r\n    .args(-1, DataType.string)\r\n    .returnType(DataType.void)\r\n    .run((_, command: string) => {\r\n        if(!command)\r\n            return `Help commands helps you read the documentation of the given command.\\n\\nSyntax: help <command>`;\r\n\r\n        const cmd = store.getCommand(command);\r\n\r\n        if(!cmd)\r\n            return `Command '${command}' not found.`;\r\n\r\n        _.stdout.print(prettyHelp(cmd));\r\n    })\r\n    .build()\r\n)\r\n\r\n// EVAL\r\nstore.addCommand(builder\r\n    .names('exec', 'execute', 'eval', 'evaluate')\r\n    .docs(new DocsBuilder()\r\n        .name('execute')\r\n        .aliases('eval', 'evaluate')\r\n        .description('Takes in any number of commands and executes them sequentially and returns the last executed command\\'s return. Useful when you want to run multiple commands sequentially')\r\n        .syntax('eval <cmd1> <cmd2> ... <cmdN>')\r\n        .example('eval (set x 10) (set y 30) (print x = (get x)) (print y = (get y))')\r\n        .build()\r\n    )\r\n    .args(-1, DataType.any)\r\n    .returnType(DataType.any)\r\n    .run((_, ...args: unknown[]) => {\r\n        return args[args.length - 1]\r\n    })\r\n    .build()\r\n);","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Logical Operators\");\r\n\r\n// AND\r\nstore.addCommand(builder\r\n    .names('and')\r\n    .args(2, DataType.boolean, DataType.boolean)\r\n    .docs(new DocsBuilder()\r\n        .name('and')\r\n        .description('Checks if both conditions are true.')\r\n        .syntax('and <boolean> <boolean>')\r\n        .example('and true false') // false\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: boolean, b: boolean) => a && b)\r\n    .build()\r\n)\r\n\r\n// OR\r\nstore.addCommand(builder\r\n    .names('or')\r\n    .args(2, DataType.boolean, DataType.boolean)\r\n    .docs(new DocsBuilder()\r\n        .name('or')\r\n        .description('Checks if either condition is true.')\r\n        .syntax('or <boolean> <boolean>')\r\n        .example('or true false') // true\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: boolean, b: boolean) => a || b)\r\n    .build()\r\n)\r\n\r\n// NOT\r\nstore.addCommand(builder\r\n    .names('not')\r\n    .args(1, DataType.boolean)\r\n    .docs(new DocsBuilder()\r\n        .name('not')\r\n        .description('Negates the condition.')\r\n        .syntax('not <boolean>')\r\n        .example('not true') // false\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: boolean) => !a)\r\n    .build()\r\n)\r\n\r\n// TRUE\r\nstore.addCommand(builder\r\n    .names('TRUE')\r\n    .args(0)\r\n    .docs(new DocsBuilder()\r\n        .name('TRUE')\r\n        .description('Returns true.')\r\n        .syntax('TRUE')\r\n        .example('and (TRUE) (TRUE)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run(() => true)\r\n    .build()\r\n)\r\n\r\n// FALSE\r\nstore.addCommand(builder\r\n    .names('FALSE')\r\n    .args(0)\r\n    .docs(new DocsBuilder()\r\n        .name('FALSE')\r\n        .description('Returns false.')\r\n        .syntax('FALSE')\r\n        .example('FALSE')\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run(() => false)\r\n    .build()\r\n)\r\n","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Comparison\");\r\n\r\n// LESS THAN\r\nstore.addCommand(builder\r\n    .names('lt', 'less-than')\r\n    .args(2, DataType.number, DataType.number)\r\n    .docs(new DocsBuilder()\r\n        .name('lt')\r\n        .aliases('less-than')\r\n        .description('Checks if the first number is less than the second.')\r\n        .syntax('lt <number> <number>')\r\n        .example('lt 2 3') // true\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: number, b: number) => a < b)\r\n    .build()\r\n);\r\n\r\n// LESS THAN OR EQUAL TO\r\nstore.addCommand(builder\r\n    .names('lte', 'less-than-equal')\r\n    .args(2, DataType.number, DataType.number)\r\n    .docs(new DocsBuilder()\r\n        .name('lte')\r\n        .aliases('less-than-equal')\r\n        .description('Checks if the first number is less than or equal to the second.')\r\n        .syntax('lte <number> <number>')\r\n        .example('lte 2 3') // true\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: number, b: number) => a <= b)\r\n    .build()\r\n)\r\n\r\n// GREATER THAN\r\nstore.addCommand(builder\r\n    .names('gt', 'greater-than')\r\n    .args(2, DataType.number, DataType.number)\r\n    .docs(new DocsBuilder()\r\n        .name('gt')\r\n        .aliases('greater-than')\r\n        .description('Checks if the first number is greater than the second.')\r\n        .syntax('gt <number> <number>')\r\n        .example('gt 2 3') // false\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: number, b: number) => a > b)\r\n    .build()\r\n)\r\n\r\n// GREATER THAN OR EQUAL TO\r\nstore.addCommand(builder\r\n    .names('gte', 'greater-than-equal')\r\n    .args(2, DataType.number, DataType.number)\r\n    .docs(new DocsBuilder()\r\n        .name('gte')\r\n        .aliases('greater-than-equal')\r\n        .description('Checks if the first number is greater than or equal to the second.')\r\n        .syntax('gte <number> <number>')\r\n        .example('gte 2 3') // false\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: number, b: number) => a >= b)\r\n    .build()\r\n)\r\n\r\n// EQUALS\r\nstore.addCommand(builder\r\n    .names('equals', 'eq', 'is')\r\n    .args(2, DataType.any, DataType.any)\r\n    .docs(new DocsBuilder()\r\n        .name('equals')\r\n        .aliases('e', 'is')\r\n        .description('Checks if the two values are equal.')\r\n        .syntax('equals <value> <value>')\r\n        .example('equals 2 3') // false\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: any, b: any) => a === b)\r\n    .build()\r\n)\r\n\r\n// NOT EQUALS\r\nstore.addCommand(builder\r\n    .names('ne', 'not-equals', 'not-is')\r\n    .args(2, DataType.any, DataType.any)\r\n    .docs(new DocsBuilder()\r\n        .name('ne')\r\n        .aliases('not-equals', 'not-is')\r\n        .description('Checks if the two values are not equal.')\r\n        .syntax('ne <value> <value>')\r\n        .example('ne 2 3') // true\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .run((_, a: any, b: any) => a !== b)\r\n    .build()\r\n)","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Arithmetics\");\r\n\r\n// ADDITION\r\nstore.addCommand(builder\r\n    .names('add', 'sum', 'plus', 'addition')\r\n    .docs(new DocsBuilder()\r\n        .name('add')\r\n        .aliases('sum', 'plus', 'addition')\r\n        .description('Adds the given numbers together and returns the result.')\r\n        .syntax('add <number1> <number2> ...')\r\n        .example('add 1 2 3 4 5')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args) => args.reduce((acc, curr) => acc + curr, 0))\r\n    .build()\r\n)\r\n\r\n// SUBTRACTION\r\nstore.addCommand(builder\r\n    .names('subtract', 'sub', 'minus', 'subtraction')\r\n    .docs(new DocsBuilder()\r\n        .name('sub')\r\n        .aliases('sub', 'minus', 'subtraction')\r\n        .description('Subtracts the given numbers and returns the result.')\r\n        .syntax('subtract <number1> <number2> ...')\r\n        .example('subtract 10 5 2')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args) => args.reduce((acc, curr) => acc - curr))\r\n    .build()\r\n)\r\n\r\n// MULTIPLICATION\r\nstore.addCommand(builder\r\n    .names('multiply', 'mult', 'mul', 'product', 'multiplication')\r\n    .docs(new DocsBuilder()\r\n        .name('mult')\r\n        .aliases('multiply', 'mul', 'product', 'multiplication')\r\n        .description('Multiplies the given numbers and returns the result.')\r\n        .syntax('multiply <number1> <number2> ...')\r\n        .example('multiply 2 3 4')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args) => args.reduce((acc, curr) => acc * curr, 1))\r\n    .build()\r\n)\r\n\r\n// DIVISION\r\nstore.addCommand(builder\r\n    .names('divide', 'div', 'division')\r\n    .docs(new DocsBuilder()\r\n        .name('div')\r\n        .aliases('divide', 'division')\r\n        .description('Divides the given numbers and returns the result.')\r\n        .syntax('divide <number1> <number2> ...')\r\n        .example('divide 10 2 2')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args) => args.reduce((acc, curr) => acc / curr))\r\n    .build()\r\n)\r\n\r\n// MODULO\r\nstore.addCommand(builder\r\n    .names('modulo', 'mod', 'remainder')\r\n    .docs(new DocsBuilder()\r\n        .name('mod')\r\n        .aliases('modulo', 'remainder')\r\n        .description('Calculates the remainder of the division of the given numbers.')\r\n        .syntax('modulo <number1> <number2>')\r\n        .example('modulo 10 3')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(2, DataType.number)\r\n    .run((_, a, b) => a % b)\r\n    .build()\r\n)\r\n","function gcdAB(a: number, b: number): number {\r\n    if (b === 0) {\r\n        return a;\r\n    }\r\n    return gcdAB(b, a % b);\r\n}\r\n\r\nexport function gcd(...args: number[]): number {\r\n    let result = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        result = gcdAB(result, args[i]);\r\n    }\r\n    return result;\r\n}\r\n","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {gcd} from \"./utils\";\r\nimport ASRuntimeError from \"../../errors/ASRuntimeError\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Math Functions\");\r\n\r\n// ABSOLUTE\r\nstore.addCommand(builder\r\n    .names('abs', 'absolute')\r\n    .docs(new DocsBuilder()\r\n        .name('abs')\r\n        .aliases('absolute')\r\n        .description('Returns the absolute value of the given number.')\r\n        .syntax('abs <number>')\r\n        .example('abs -5')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.abs(a))\r\n    .build()\r\n)\r\n\r\n// ROUND\r\nstore.addCommand(builder\r\n    .names('round')\r\n    .docs(new DocsBuilder()\r\n        .name('round')\r\n        .description('Rounds the given number to the nearest integer.')\r\n        .syntax('round <number>')\r\n        .example('round 3.14')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.round(a))\r\n    .build()\r\n)\r\n\r\n// CEIL\r\nstore.addCommand(builder\r\n    .names('ceil', 'ceiling')\r\n    .docs(new DocsBuilder()\r\n        .name('ceil')\r\n        .aliases('ceiling')\r\n        .description('Rounds the given number up to the nearest integer.')\r\n        .syntax('ceil <number>')\r\n        .example('ceil 3.14')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.ceil(a))\r\n    .build()\r\n)\r\n\r\n// FLOOR\r\nstore.addCommand(builder\r\n    .names('floor')\r\n    .docs(new DocsBuilder()\r\n        .name('floor')\r\n        .description('Rounds the given number down to the nearest integer.')\r\n        .syntax('floor <number>')\r\n        .example('floor 3.14')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.floor(a))\r\n    .build()\r\n)\r\n\r\n// TRUNCATE\r\nstore.addCommand(builder\r\n    .names('truncate', 'trunc')\r\n    .docs(new DocsBuilder()\r\n        .name('truncate')\r\n        .aliases('trunc')\r\n        .description('Truncates the given number to the nearest integer towards zero.')\r\n        .syntax('truncate <number>')\r\n        .example('truncate 3.14')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.trunc(a))\r\n    .build()\r\n)\r\n\r\n// MIN\r\nstore.addCommand(builder\r\n    .names('min', 'minimum')\r\n    .docs(new DocsBuilder()\r\n        .name('min')\r\n        .aliases('minimum')\r\n        .description('Returns the smallest number from the given numbers.')\r\n        .syntax('min <number1> <number2> ...')\r\n        .example('min 2 5 1 9 3')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args) => Math.min(...args))\r\n    .build()\r\n)\r\n\r\n// MAX\r\nstore.addCommand(builder\r\n    .names('max', 'maximum')\r\n    .docs(new DocsBuilder()\r\n        .name('max')\r\n        .aliases('maximum')\r\n        .description('Returns the largest number from the given numbers.')\r\n        .syntax('max <number1> <number2> ...')\r\n        .example('max 2 5 1 9 3')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args) => Math.max(...args))\r\n    .build()\r\n)\r\n\r\n// CLAMP\r\nstore.addCommand(builder\r\n    .names('clamp')\r\n    .docs(new DocsBuilder()\r\n        .name('clamp')\r\n        .description('Clamps the given number within the given range.')\r\n        .syntax('clamp <number> <min> <max>')\r\n        .example('clamp 5 1 10')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(3, DataType.number)\r\n    .run((_, a, min, max) => Math.min(Math.max(a, min), max))\r\n    .build()\r\n)\r\n\r\n// SIGN\r\nstore.addCommand(builder\r\n    .names('sign')\r\n    .docs(new DocsBuilder()\r\n        .name('sign')\r\n        .description(`Returns the sign of the given number.\r\nReturns 1 if positive else -1.\r\nFor positive 0 => +0\r\nFor negative 0 => -0`)\r\n        .syntax('sign <number>')\r\n        .example('sign -5')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.sign(a))\r\n    .build()\r\n)\r\n\r\n// POWER\r\nstore.addCommand(builder\r\n    .names('pow', 'power')\r\n    .docs(new DocsBuilder()\r\n        .name('pow')\r\n        .aliases('power')\r\n        .description('Raises the first number to the power of the second number.')\r\n        .syntax('pow <number1> <number2>')\r\n        .example('pow 2 3')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(2, DataType.number)\r\n    .run((_, a, b) => Math.pow(a, b))\r\n    .build()\r\n)\r\n\r\n// SQUARE ROOT\r\nstore.addCommand(builder\r\n    .names('sqrt', 'root')\r\n    .docs(new DocsBuilder()\r\n        .name('sqrt')\r\n        .aliases('root')\r\n        .description('Calculates the square root of the given number.')\r\n        .syntax('sqrt <number>')\r\n        .example('sqrt 9')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.sqrt(a))\r\n    .build()\r\n)\r\n\r\n// FACTORIAL\r\nstore.addCommand(builder\r\n    .names('factorial', 'fact')\r\n    .docs(new DocsBuilder()\r\n        .name('factorial')\r\n        .aliases('fact')\r\n        .description('Calculates the factorial of the given number.')\r\n        .syntax('factorial <number>')\r\n        .example('factorial 5')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => {\r\n        let result = 1;\r\n        for (let i = 1; i <= a; i++) {\r\n            result *= i;\r\n        }\r\n        return result;\r\n    })\r\n    .build()\r\n)\r\n\r\n\r\n// GCD\r\nstore.addCommand(builder\r\n    .names('gcd', 'hcf')\r\n    .docs(new DocsBuilder()\r\n        .name('gcd')\r\n        .aliases('hcf')\r\n        .description('Calculates the greatest basic divisor of the given numbers.')\r\n        .syntax('gcd <number1> <number2> ...')\r\n        .example('gcd 24 36')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args: number[]) => gcd(...args))\r\n    .build()\r\n)\r\n\r\n// LCM\r\nstore.addCommand(builder\r\n    .names('lcm')\r\n    .docs(new DocsBuilder()\r\n        .name('lcm')\r\n        .description('Calculates the least basic multiple of the given numbers.')\r\n        .syntax('lcm <number1> <number2> ...')\r\n        .example('lcm 24 36')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(-2, DataType.number)\r\n    .run((_, ...args: number[]) => {\r\n        if (args.length < 2)\r\n            throw new ASRuntimeError('At least 2 numbers are required for lcm', {\r\n                state: _.currentState!,\r\n                occurredCmd: _.currentCommand!,\r\n            });\r\n\r\n        let result = args[0]!;\r\n        for (let i = 1; i < args.length; i++)\r\n            result = result * args[i]! / gcd(result, args[i]!);\r\n\r\n        return result;\r\n    })\r\n    .build()\r\n)\r\n\r\n// LOG2\r\nstore.addCommand(builder\r\n    .names('log2')\r\n    .docs(new DocsBuilder()\r\n        .name('log2')\r\n        .description('Calculates the base 2 logarithm of the given number.')\r\n        .syntax('log2 <number>')\r\n        .example('log2 8')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.log2(a))\r\n    .build()\r\n)\r\n\r\n// LOG10\r\nstore.addCommand(builder\r\n    .names('log10')\r\n    .docs(new DocsBuilder()\r\n        .name('log10')\r\n        .description('Calculates the base 10 logarithm of the given number.')\r\n        .syntax('log10 <number>')\r\n        .example('log10 100')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.log10(a))\r\n    .build()\r\n)\r\n\r\n// LN\r\nstore.addCommand(builder\r\n    .names('ln', 'loge')\r\n    .docs(new DocsBuilder()\r\n        .name('ln')\r\n        .aliases('loge')\r\n        .description('Calculates the natural logarithm of the given number.')\r\n        .syntax('ln <number>')\r\n        .example('ln 2.718')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.number)\r\n    .run((_, a) => Math.log(a))\r\n    .build()\r\n)","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Trigonometry\");\r\n\r\n// SINE\r\nstore.addCommand(builder\r\n    .names('sin', 'sine')\r\n    .docs(new DocsBuilder()\r\n        .name('sin')\r\n        .aliases('sine')\r\n        .description('Returns the sine of the given angle in radians.')\r\n        .syntax('sin <angle>')\r\n        .example('sin 90')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.sin(angle))\r\n    .build()\r\n)\r\n\r\n// COSINE\r\nstore.addCommand(builder\r\n    .names('cos', 'cosine')\r\n    .docs(new DocsBuilder()\r\n        .name('cos')\r\n        .aliases('cosine')\r\n        .description('Returns the cosine of the given angle in radians.')\r\n        .syntax('cos <angle>')\r\n        .example('cos 90')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.cos(angle))\r\n    .build()\r\n)\r\n\r\n// TANGENT\r\nstore.addCommand(builder\r\n    .names('tan', 'tangent')\r\n    .docs(new DocsBuilder()\r\n        .name('tan')\r\n        .aliases('tangent')\r\n        .description('Returns the tangent of the given angle in radians.')\r\n        .syntax('tan <angle>')\r\n        .example('tan 90')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.tan(angle))\r\n    .build()\r\n)\r\n\r\n// ARCSINE\r\nstore.addCommand(builder\r\n    .names('asin', 'arcsine')\r\n    .docs(new DocsBuilder()\r\n        .name('asin')\r\n        .aliases('arcsine')\r\n        .description('Returns the arcsine of the given angle in radians.')\r\n        .syntax('asin <angle>')\r\n        .example('asin 1')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.asin(angle))\r\n    .build()\r\n)\r\n\r\n// ARCCOSINE\r\nstore.addCommand(builder\r\n    .names('acos', 'arccosine')\r\n    .docs(new DocsBuilder()\r\n        .name('acos')\r\n        .aliases('arccosine')\r\n        .description('Returns the arccosine of the given angle in radians.')\r\n        .syntax('acos <angle>')\r\n        .example('acos 1')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.acos(angle))\r\n    .build()\r\n)\r\n\r\n// ARCTANGENT\r\nstore.addCommand(builder\r\n    .names('atan', 'arctangent')\r\n    .docs(new DocsBuilder()\r\n        .name('atan')\r\n        .aliases('arctangent')\r\n        .description('Returns the arctangent of the given angle in radians.')\r\n        .syntax('atan <angle>')\r\n        .example('atan 1')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.atan(angle))\r\n    .build()\r\n)\r\n\r\n// ARCTANGENT2\r\nstore.addCommand(builder\r\n    .names('atan2', 'arctangent2')\r\n    .docs(new DocsBuilder()\r\n        .name('atan2')\r\n        .aliases('arctangent2')\r\n        .description('Returns the arctangent of the quotient of its arguments.')\r\n        .syntax('atan2 <y> <x>')\r\n        .example('atan2 1 1')\r\n        .build()\r\n    )\r\n    .args(2, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, y, x) => Math.atan2(y, x))\r\n    .build()\r\n)\r\n\r\n// HYPERBOLIC SINE\r\nstore.addCommand(builder\r\n    .names('sinh', 'hsine')\r\n    .docs(new DocsBuilder()\r\n        .name('sinh')\r\n        .aliases('hsine')\r\n        .description('Returns the hyperbolic sine of the given angle in radians.')\r\n        .syntax('sinh <angle>')\r\n        .example('sinh 90')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.sinh(angle))\r\n    .build()\r\n)\r\n\r\n// HYPERBOLIC COSINE\r\nstore.addCommand(builder\r\n    .names('cosh', 'hcosine')\r\n    .docs(new DocsBuilder()\r\n        .name('cosh')\r\n        .aliases('hcosine')\r\n        .description('Returns the hyperbolic cosine of the given angle in radians.')\r\n        .syntax('cosh <angle>')\r\n        .example('cosh 90')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.cosh(angle))\r\n    .build()\r\n)\r\n\r\n// HYPERBOLIC TANGENT\r\nstore.addCommand(builder\r\n    .names('tanh', 'htangent')\r\n    .docs(new DocsBuilder()\r\n        .name('tanh')\r\n        .aliases('htangent')\r\n        .description('Returns the hyperbolic tangent of the given angle in radians.')\r\n        .syntax('tanh <angle>')\r\n        .example('tanh 90')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.tanh(angle))\r\n    .build()\r\n)\r\n\r\n// HYPERBOLIC ARCSINE\r\nstore.addCommand(builder\r\n    .names('asinh', 'arcsineh')\r\n    .docs(new DocsBuilder()\r\n        .name('asinh')\r\n        .aliases('arcsineh')\r\n        .description('Returns the hyperbolic arcsine of the given angle in radians.')\r\n        .syntax('asinh <angle>')\r\n        .example('asinh 1')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.asinh(angle))\r\n    .build()\r\n)\r\n\r\n// HYPERBOLIC ARCCOSINE\r\nstore.addCommand(builder\r\n    .names('acosh', 'arccosineh')\r\n    .docs(new DocsBuilder()\r\n        .name('acosh')\r\n        .aliases('arccosineh')\r\n        .description('Returns the hyperbolic arccosine of the given angle in radians.')\r\n        .syntax('acosh <angle>')\r\n        .example('acosh 1')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.acosh(angle))\r\n    .build()\r\n)\r\n\r\n// HYPERBOLIC ARCTANGENT\r\nstore.addCommand(builder\r\n    .names('atanh', 'arctangenth')\r\n    .docs(new DocsBuilder()\r\n        .name('atanh')\r\n        .aliases('arctangenth')\r\n        .description('Returns the hyperbolic arctangent of the given angle in radians.')\r\n        .syntax('atanh <angle>')\r\n        .example('atanh 1')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => Math.atanh(angle))\r\n    .build()\r\n)\r\n\r\n// DEGREES TO RADIANS\r\nstore.addCommand(builder\r\n    .names('degToRad', 'd2r', 'deg2rad', 'deg')\r\n    .docs(new DocsBuilder()\r\n        .name('deg')\r\n        .aliases('d2r', 'deg2rad', 'degToRad')\r\n        .description('Converts the given angle in degrees to radians.')\r\n        .syntax('degToRad <angle>')\r\n        .example('degToRad 90')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => angle * Math.PI / 180)\r\n    .build()\r\n)\r\n\r\n// RADIANS TO DEGREES\r\nstore.addCommand(builder\r\n    .names('radToDeg', 'r2d', 'rad2deg', 'rad')\r\n    .docs(new DocsBuilder()\r\n        .name('rad')\r\n        .aliases('r2d', 'rad2deg', 'radToDeg')\r\n        .description('Converts the given angle in radians to degrees.')\r\n        .syntax('radToDeg <angle>')\r\n        .example('radToDeg 1.57')\r\n        .build()\r\n    )\r\n    .args(1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, angle) => angle * 180 / Math.PI)\r\n    .build()\r\n)\r\n","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Random\");\r\n\r\n// RANDOM\r\nstore.addCommand(builder\r\n    .names('random', 'rand', 'randf')\r\n    .docs(new DocsBuilder()\r\n        .name('random')\r\n        .aliases('rand', 'randf')\r\n        .description('Returns a random float between the specified ranges (optional). If no range is given then random float b/w 0 and 1, if one is specified number b/w 0 and that num.')\r\n        .syntax('random <min?> <max?>')\r\n        .example('random 5 10')\r\n        .build()\r\n    )\r\n    .args(-1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, a: number | null, b: number | null) => {\r\n        if(a && b)\r\n            return Math.random() * (b - a) + a;\r\n        else if(a)\r\n            return Math.random() * a;\r\n        else\r\n            return Math.random();\r\n    })\r\n    .build()\r\n)\r\n\r\n// RANDOM INT\r\nstore.addCommand(builder\r\n    .names('randomInt', 'randInt', 'randi')\r\n    .docs(new DocsBuilder()\r\n        .name('randomInt')\r\n        .aliases('randInt', 'randi')\r\n        .description('Returns a random integer between the specified ranges (optional). If no range is given then random integer b/w 0 and 1, if one is specified number b/w 0 and that num.')\r\n        .syntax('randomInt <min?> <max?>')\r\n        .example('randomInt 5 10')\r\n        .build()\r\n    )\r\n    .args(-1, DataType.number)\r\n    .returnType(DataType.number)\r\n    .run((_, a: number | null, b: number | null) => {\r\n        if(a && b)\r\n            return Math.floor(Math.random() * (b - a + 1) + a);\r\n        else if(a)\r\n            return Math.floor(Math.random() * a);\r\n        else\r\n            return Math.floor(Math.random());\r\n    })\r\n    .build()\r\n)\r\n\r\n// RANDOM BOOL\r\nstore.addCommand(builder\r\n    .names('randomBool', 'randBool', 'randb')\r\n    .docs(new DocsBuilder()\r\n        .name('randomBool')\r\n        .aliases('randBool', 'randb')\r\n        .description('Returns a random boolean value.')\r\n        .syntax('randomBool')\r\n        .example('randomBool')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.boolean)\r\n    .run(() => Math.random() < 0.5)\r\n    .build()\r\n)\r\n\r\n// RANDOM CHAR\r\nstore.addCommand(builder\r\n    .names('randomChar', 'randChar', 'randc')\r\n    .docs(new DocsBuilder()\r\n        .name('randomChar')\r\n        .aliases('randChar', 'randc')\r\n        .description('Returns a random character from the ASCII table.')\r\n        .syntax('randomChar')\r\n        .example('randomChar')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.string)\r\n    .run(() => String.fromCharCode(Math.floor(Math.random() * 256)))\r\n    .build()\r\n)","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Constants\");\r\n\r\n// PI\r\nstore.addCommand(builder\r\n    .names('pi', 'PI')\r\n    .docs(new DocsBuilder()\r\n        .name('pi')\r\n        .aliases('PI')\r\n        .description('Returns the mathematical constant π.')\r\n        .syntax('pi')\r\n        .example('pi')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.number)\r\n    .run(() => Math.PI)\r\n    .build()\r\n)\r\n\r\n// E\r\nstore.addCommand(builder\r\n    .names('e', 'E')\r\n    .docs(new DocsBuilder()\r\n        .name('E')\r\n        .aliases('e')\r\n        .description('Returns the mathematical constant e.')\r\n        .syntax('e')\r\n        .example('e')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.number)\r\n    .run(() => Math.E)\r\n    .build()\r\n)\r\n\r\n// SQRT 2\r\nstore.addCommand(builder\r\n    .names('sqrt2', 'root2')\r\n    .docs(new DocsBuilder()\r\n        .name('sqrt2')\r\n        .aliases('root2')\r\n        .description('Returns the square root of 2.')\r\n        .syntax('sqrt2')\r\n        .example('sqrt2')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.number)\r\n    .run(() => Math.SQRT2)\r\n    .build()\r\n)\r\n\r\n// LN2\r\nstore.addCommand(builder\r\n    .names('ln2')\r\n    .docs(new DocsBuilder()\r\n        .name('ln2')\r\n        .description('Returns the natural logarithm of 2.')\r\n        .syntax('ln2')\r\n        .example('ln2')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.number)\r\n    .run(() => Math.LN2)\r\n    .build()\r\n)\r\n\r\n// LN10\r\nstore.addCommand(builder\r\n    .names('ln10')\r\n    .docs(new DocsBuilder()\r\n        .name('ln10')\r\n        .description('Returns the natural logarithm of 10.')\r\n        .syntax('ln10')\r\n        .example('ln10')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.number)\r\n    .run(() => Math.LN10)\r\n    .build()\r\n)\r\n\r\n// LOG2E\r\nstore.addCommand(builder\r\n    .names('log2e')\r\n    .docs(new DocsBuilder()\r\n        .name('log2e')\r\n        .description('Returns the base 2 logarithm of e.')\r\n        .syntax('log2e')\r\n        .example('log2e')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.number)\r\n    .run(() => Math.LOG2E)\r\n    .build()\r\n)\r\n\r\n// LOG10E\r\nstore.addCommand(builder\r\n    .names('log10e')\r\n    .docs(new DocsBuilder()\r\n        .name('log10e')\r\n        .description('Returns the base 10 logarithm of e.')\r\n        .syntax('log10e')\r\n        .example('log10e')\r\n        .build()\r\n    )\r\n    .args(0)\r\n    .returnType(DataType.number)\r\n    .run(() => Math.LOG10E)\r\n    .build()\r\n)","import ASBaseError from \"./ASBaseError\";\r\n\r\n/**\r\n * Reprints errors that are not fatal, but just gracefully exits from the program.\r\n * For example, thrown when the loop limit is exceeded.\r\n */\r\nexport default class ASGracefulExitError extends ASBaseError {\r\n    prettify(): string {\r\n        return `Gracefully exited: ${this.message}`;\r\n    }\r\n}","import ASBaseError from \"./ASBaseError\";\r\n\r\n/**\r\n * Used to interrupt the execution of a function.\r\n * Used in loops, continue, break, etc.\r\n */\r\nexport default class ASInterrupt extends ASBaseError {\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        this.name = 'ASInterrupt';\r\n    }\r\n}","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\nimport ASGracefulExitError from \"../../errors/ASGracefulExitError\";\r\nimport ASRuntimeError from \"../../errors/ASRuntimeError\";\r\nimport ASInterrupt from \"../../errors/ASInterrupt\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Loops\");\r\n\r\n/** Runs a given command, does nothing if an ASInterrupt is thrown else throws the error*/\r\nfunction runAndHandleError(command: () => unknown) {\r\n    try {\r\n        command();\r\n    } catch (e) {\r\n        if (!(e instanceof ASInterrupt)) {\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n\r\n// BREAK\r\nstore.addCommand(builder\r\n    .names('break')\r\n    .args(0)\r\n    .docs(new DocsBuilder()\r\n        .name('break')\r\n        .description('Breaks out of the loop in which it is called.')\r\n        .syntax('break')\r\n        .note('Internally it throws an `ASInterrupt` error to interrupt the execution, but is gracefully handled. When implementing your own commands, you should always handle this error')\r\n        .example(`\r\n(set i 0)\r\n(while (lt (get i) 10) (\r\n    (if (eq (get i) 5) (\r\n        (print i is 5)\r\n        (break)\r\n    ))\r\n    \r\n    (print (get i))    \r\n    (incr i)    \r\n))`)\r\n        .build()\r\n    )\r\n    .returnType(DataType.void)\r\n    .run(_ => {\r\n        if (!_.isInLoop)\r\n            throw new ASRuntimeError('`break` can only be used inside a loop.', {\r\n                state: _.currentState!,\r\n                occurredCmd: _.currentCommand!,\r\n            })\r\n        _.isBreakCalled = true;\r\n        throw new ASInterrupt('Continue called');\r\n    })\r\n    .build()\r\n)\r\n\r\n// CONTINUE\r\nstore.addCommand(builder\r\n    .names('continue')\r\n    .args(0)\r\n    .docs(new DocsBuilder()\r\n        .name('continue')\r\n        .description('Skips the rest of the loop body and does the next iteration in which it is called.')\r\n        .note('Internally it throws an `ASInterrupt` error to interrupt the execution, but is gracefully handled. When implementing your own commands, you should always handle this error')\r\n        .syntax('continue')\r\n        .example(`\r\n(set i 0)\r\n(while (lt (get i) 10) (\r\n    (if (eq (get i) 5) (\r\n        (print i is 5)\r\n        (break)\r\n    ))\r\n    \r\n    (print (get i))    \r\n    (incr i)    \r\n))`)\r\n        .build()\r\n    )\r\n    .returnType(DataType.void)\r\n    .run(_ => {\r\n        if (!_.isInLoop)\r\n            throw new ASRuntimeError('`continue` can only be used inside a loop.', {\r\n                state: _.currentState!,\r\n                occurredCmd: _.currentCommand!,\r\n            })\r\n        _.isContinueCalled = true;\r\n\r\n        throw new ASInterrupt('Continue called');\r\n    })\r\n    .build()\r\n)\r\n\r\n// WHILE\r\nstore.addCommand(builder\r\n    .names('while')\r\n    .args(2, DataType.command)\r\n    .docs(new DocsBuilder()\r\n        .name('while')\r\n        .description('Loops while the condition is true.')\r\n        .syntax('while <condition> <command>')\r\n        .example(`while (TRUE) (\r\n    (p (get i))\r\n    (break)\r\n)`)\r\n        .build()\r\n    )\r\n    .returnType(DataType.void)\r\n    .run((_, condition: () => boolean, command: () => unknown) => {\r\n\r\n        let limit = 0;\r\n        _.isInLoop = true;\r\n        while (condition()) {\r\n            if (_.isBreakCalled) {\r\n                _.isBreakCalled = false;\r\n                break;\r\n            }\r\n\r\n            if ((limit++) >= _.LOOP_LIMIT) {\r\n                _.isInLoop = false;\r\n                throw new ASGracefulExitError(`Loop limit of ${_.LOOP_LIMIT} exceeded.`);\r\n            }\r\n\r\n            if (_.isContinueCalled) {\r\n                _.isContinueCalled = false;\r\n            } else {\r\n                runAndHandleError(command);\r\n            }\r\n        }\r\n        _.isInLoop = false;\r\n    })\r\n    .build()\r\n)\r\n\r\n\r\n// REPEAT\r\nstore.addCommand(builder\r\n    .names('repeat')\r\n    .args(2, DataType.number, DataType.command)\r\n    .docs(new DocsBuilder()\r\n        .name('repeat')\r\n        .description('Repeats the given command n times.')\r\n        .syntax('repeat <number> <command>')\r\n        .example('repeat 5 (print Hello, world!)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.void)\r\n    .run((_, n: number, command: () => unknown) => {\r\n        if (n > _.LOOP_LIMIT || n < 0)\r\n            throw new ASRuntimeError(`Repetition cannot exceed ${_.LOOP_LIMIT} or be negative.`, {\r\n                state: _.currentState!,\r\n                occurredCmd: _.currentCommand!,\r\n            })\r\n\r\n        _.isInLoop = true;\r\n        for (let i = 0; i < n; i++) {\r\n            if (_.isBreakCalled) {\r\n                _.isBreakCalled = false;\r\n                break;\r\n            }\r\n\r\n            if (_.isContinueCalled) {\r\n                _.isContinueCalled = false;\r\n            } else {\r\n                runAndHandleError(command);\r\n            }\r\n        }\r\n        _.isInLoop = false;\r\n    })\r\n    .build()\r\n)\r\n\r\n// FOR LOOP\r\nstore.addCommand(builder\r\n    .names('for')\r\n    .args(4, DataType.command, DataType.command, DataType.command, DataType.command)\r\n    .docs(new DocsBuilder()\r\n        .name('for')\r\n        .description('Loops through the given range. <init> is executed once at the beginning, <condition> is checked before each iteration, <increment> is executed at each iteration.')\r\n        .syntax('for <init> <condition> <increment> <command>')\r\n        .example('for (set i 0) (lt (get i) 10) (incr i) (print i = (get i))')\r\n        .build()\r\n    )\r\n    .returnType(DataType.void)\r\n    .run((_, init: () => unknown, condition: () => boolean, increment: () => unknown, command: () => unknown) => {\r\n        // Initialize the loop, i.e., executed the first command\r\n        init();\r\n\r\n        _.isInLoop = true;\r\n        let limit = 0;\r\n\r\n        while (condition()) {\r\n            if (_.isBreakCalled) {\r\n                _.isBreakCalled = false;\r\n                break;\r\n            }\r\n\r\n            if ((limit++) >= _.LOOP_LIMIT) {\r\n                _.isInLoop = false;\r\n                throw new ASGracefulExitError(`Loop limit of ${_.LOOP_LIMIT} exceeded.`);\r\n            }\r\n\r\n            if (_.isContinueCalled) {\r\n                _.isContinueCalled = false;\r\n            } else {\r\n                runAndHandleError(command);\r\n                // Increment the loop in regular execution and continue call, but not on break call.\r\n                if (!_.isBreakCalled)\r\n                    runAndHandleError(increment);\r\n            }\r\n        }\r\n        _.isInLoop = false;\r\n    })\r\n    .build()\r\n);","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\nimport ASRuntimeError from \"../../errors/ASRuntimeError\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Conditionals\");\r\n\r\n// IF\r\nstore.addCommand(builder\r\n    .names('if')\r\n    .args(2, DataType.command, DataType.command)\r\n    .docs(new DocsBuilder()\r\n        .name('if')\r\n        .description('Executes a command if the condition is true.')\r\n        .syntax('if <condition> <command>')\r\n        .example('if (lt 10 20) (print 10 < 20)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.void)\r\n    .run((_, condition: () => boolean, func: () => void) => {\r\n        if(condition())\r\n            func();\r\n    })\r\n    .build()\r\n)\r\n\r\n// IF AND ELSE\r\nstore.addCommand(builder\r\n    .names('if-else', 'ife')\r\n    .args(4, DataType.command, DataType.command, DataType.string, DataType.command)\r\n    .docs(new DocsBuilder()\r\n        .name('if-else')\r\n        .aliases('ife')\r\n        .description('Executes a command if the condition is true, otherwise executes another command.')\r\n        .syntax('if <condition> <command> else <command>')\r\n        .example('if (lt 10 20) (print 10 < 20) else (print 10 >= 20)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.void)\r\n    .run((_, condition: () => boolean, func1: () => void, str: string, func2: () => void) => {\r\n        if(str !== 'else')\r\n            throw new ASRuntimeError(`Expected 'else' but got '${str}'`, {\r\n                state: _.currentState!,\r\n                occurredCmd: _.currentCommand!,\r\n            })\r\n\r\n        if(condition())\r\n            func1();\r\n        else\r\n            func2();\r\n    })\r\n    .build()\r\n)\r\n","import CommandStore from \"../../interpreter/CommandStore\";\r\nimport {CommandBuilder} from \"../../specs/CommandBuilder\";\r\nimport DataType from \"../../specs/tokens/DataType\";\r\nimport {DocsBuilder} from \"../../specs/DocsBuilder\";\r\nimport {isNameValid} from \"../../utils/lang_utils\";\r\nimport ASRuntimeError from \"../../errors/ASRuntimeError\";\r\nimport BaseContextProvider from \"../../services/BaseContextProvider\";\r\nimport {I_Arr} from \"../../services/VariableStore\";\r\n\r\nconst store = CommandStore.getInstance();\r\nconst builder = new CommandBuilder(\"Variables\");\r\n\r\nfunction checkForNameError(name: string, _: BaseContextProvider) {\r\n    if (!isNameValid(name))\r\n        throw new ASRuntimeError(`Invalid variable name: ${name}. The variable name should only contain letters, numbers, underscores and hyphens. And should not start with a number.`, {\r\n            state: _.currentState!,\r\n            occurredCmd: _.currentCommand?.params[0]!\r\n        });\r\n}\r\n\r\n// SET\r\nstore.addCommand(builder\r\n    .names('set', 'set-variable', 'var')\r\n    .docs(new DocsBuilder()\r\n        .name('set')\r\n        .aliases('set-variable', 'var')\r\n        .description('Used to create a new variable, if the variable name already exits it updates the existing one.')\r\n        .syntax('set <variable-name> <value>')\r\n        .example('set x 5')\r\n        .build()\r\n    )\r\n    .returnType(DataType.any)\r\n    .args(2, DataType.string, DataType.any)\r\n    .run((_, name: string, value: unknown) => {\r\n        checkForNameError(name, _);\r\n        _.storeService.setVariable(name, value);\r\n\r\n        return value;\r\n    })\r\n    .build()\r\n);\r\n\r\n// GET\r\nstore.addCommand(builder\r\n    .names('get', 'get-variable')\r\n    .docs(new DocsBuilder()\r\n        .name('get')\r\n        .aliases('get-variable')\r\n        .description('Returns the value of a variable.')\r\n        .syntax('get <variable-name>')\r\n        .example('get x')\r\n        .build()\r\n    )\r\n    .returnType(DataType.any)\r\n    .args(1, DataType.string)\r\n    .run((_, name: string) => {\r\n        const variable = _.storeService.getVariable(name);\r\n        if (variable)\r\n            return variable.value;\r\n\r\n        throw new ASRuntimeError(`Variable ${name} does not exist.`, {\r\n            state: _.currentState!,\r\n            occurredCmd: _.currentCommand?.params[0]!,\r\n        });\r\n    })\r\n    .build()\r\n);\r\n\r\n// DELETE\r\nstore.addCommand(builder\r\n    .names('delete', 'delete-variable')\r\n    .docs(new DocsBuilder()\r\n        .name('delete')\r\n        .aliases('delete-variable')\r\n        .description('Deletes a variable. Returns true if the variable existed and is deleted, false otherwise.')\r\n        .syntax('delete <variable-name>')\r\n        .example('delete x')\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .args(1, DataType.string)\r\n    .run((_, name: string) => {\r\n        return _.storeService.deleteVariable(name);\r\n    })\r\n    .build()\r\n)\r\n\r\nfunction checkForErrors(_: BaseContextProvider, variable: any) {\r\n    const value = _.storeService.getVariable(variable);\r\n\r\n    if (!value)\r\n        throw new ASRuntimeError(`Variable '${variable}' not found.`, {\r\n            state: _.currentState!,\r\n            occurredCmd: _.currentCommand!,\r\n        })\r\n\r\n    if (value.type !== DataType.number)\r\n        throw new ASRuntimeError(`Variable '${variable}' is not a number.`, {\r\n            state: _.currentState!,\r\n            occurredCmd: _.currentCommand!,\r\n        })\r\n\r\n    return value;\r\n}\r\n\r\n// INCREMENT\r\nstore.addCommand(builder\r\n    .names('incr', 'increment')\r\n    .docs(new DocsBuilder()\r\n        .name('incr')\r\n        .aliases('increment')\r\n        .description('Increments the given variable by 1.')\r\n        .syntax('incr <varname>')\r\n        .example('incr i')\r\n        .build()\r\n    )\r\n    .args(1, DataType.string)\r\n    .returnType(DataType.number)\r\n    .run((_, variable) => {\r\n        const value = checkForErrors(_, variable);\r\n\r\n        _.storeService.setVariable(variable, value.value as number + 1);\r\n        return value.value as number + 1;\r\n    })\r\n    .build()\r\n)\r\n\r\n// DECREMENT\r\nstore.addCommand(builder\r\n    .names('decr', 'decrement')\r\n    .docs(new DocsBuilder()\r\n        .name('decr')\r\n        .aliases('decrement')\r\n        .description('Decrements the given variable by 1.')\r\n        .syntax('decr <varname>')\r\n        .example('decr i')\r\n        .build()\r\n    )\r\n    .args(1, DataType.string)\r\n    .returnType(DataType.number)\r\n    .run((_, variable) => {\r\n        const value = checkForErrors(_, variable);\r\n\r\n        _.storeService.setVariable(variable, value.value as number - 1);\r\n        return value.value as number - 1;\r\n    })\r\n    .build()\r\n)\r\n\r\n/** Checks if the array exists and if the index is within bounds, if not throws the necessary errors*/\r\nfunction checkArrayNameAndIndex(array: I_Arr | undefined, name: string, _: BaseContextProvider, index?: number) {\r\n    if (!array)\r\n        throw new ASRuntimeError(`Array '${name}' does not exist.`, {\r\n            state: _.currentState!,\r\n            occurredCmd: _.currentCommand?.params[0]!,\r\n        });\r\n\r\n    if (index)\r\n        if (index < 0 || index >= array.value.length)\r\n            throw new ASRuntimeError(`Index ${index} out of bounds for array '${name}' of length ${name.length}.`, {\r\n                state: _.currentState!,\r\n                occurredCmd: _.currentCommand?.params[1]!,\r\n            });\r\n}\r\n\r\n// ARRAY CREATE\r\nstore.addCommand(builder\r\n    .names('array', 'arr')\r\n    .docs(new DocsBuilder()\r\n        .name('array')\r\n        .aliases('arr')\r\n        .description('Creates a new array and stores it. If the array name already exists, it overwrites the existing one.')\r\n        .syntax('array <array-name> <value1> <value2> ...')\r\n        .example('array arr 1 2 3 4')\r\n        .build()\r\n    )\r\n    .returnType(DataType.array)\r\n    .args(-2, DataType.string, DataType.any)\r\n    .run((_, name: string, ...values: unknown[]) => {\r\n        checkForNameError(name, _);\r\n        _.storeService.setArray(name, values);\r\n        return values;\r\n    })\r\n    .build()\r\n)\r\n\r\n// ARRAY GET\r\nstore.addCommand(builder\r\n    .names('get-arr', 'getarr', 'array-get')\r\n    .docs(new DocsBuilder()\r\n        .name('get-arr')\r\n        .aliases('getarr', 'array-get')\r\n        .description('Returns the array stored in the variable.')\r\n        .syntax('get-arr <array-name>')\r\n        .example('(array arr 1 2 3) (get-arr arr)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.array)\r\n    .args(1, DataType.string)\r\n    .run((_, name: string) => {\r\n        const array = _.storeService.getArray(name);\r\n        if (array)\r\n            return array.value;\r\n\r\n        checkArrayNameAndIndex(array, name, _);\r\n    })\r\n    .build()\r\n)\r\n\r\n// ARRAY GET ELEM AT\r\nstore.addCommand(builder\r\n    .names('index')\r\n    .docs(new DocsBuilder()\r\n        .name('index')\r\n        .description('Returns the value at the given index of the array.')\r\n        .syntax('index <array-name> <index>')\r\n        .example('(array arr 1 2 3 4) (index arr 2)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.any)\r\n    .args(2, DataType.string, DataType.number)\r\n    .run((_, name: string, index: number) => {\r\n        const array = _.storeService.getArray(name);\r\n        checkArrayNameAndIndex(array, name, _, index);\r\n\r\n        return array!.value[index];\r\n    })\r\n    .build()\r\n)\r\n\r\n// SET ELM AT INDEX\r\nstore.addCommand(builder\r\n    .names('setarr', 'setat', 'set-arr', 'set-at')\r\n    .docs(new DocsBuilder()\r\n        .name('setarr')\r\n        .aliases('setat', 'set-arr', 'set-at')\r\n        .description('Sets the value at the given index of the array.')\r\n        .syntax('setarr <array-name> <index> <value>')\r\n        .example('(array arr 1 2 3 4) (setarr arr 2 10)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.any)\r\n    .args(3, DataType.string, DataType.number, DataType.any)\r\n    .run((_, name: string, index: number, value: unknown) => {\r\n        const array = _.storeService.getArray(name);\r\n        checkArrayNameAndIndex(array, name, _, index);\r\n\r\n        array!.value[index] = value;\r\n        _.storeService.setArray(name, array!.value);\r\n\r\n        return value;\r\n    })\r\n    .build()\r\n)\r\n\r\n// ARRAY LENGTH\r\nstore.addCommand(builder\r\n    .names('length', 'len', 'arr-length')\r\n    .docs(new DocsBuilder()\r\n        .name('length')\r\n        .aliases('len', 'arr-length')\r\n        .description('Returns the length of the array.')\r\n        .syntax('length <array-name>')\r\n        .example('(array arr 1 2 3 4) (length arr)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.number)\r\n    .args(1, DataType.string)\r\n    .run((_, name: string) => {\r\n        const array = _.storeService.getArray(name);\r\n        checkArrayNameAndIndex(array, name, _);\r\n\r\n        return array!.value.length;\r\n    })\r\n    .build()\r\n)\r\n\r\n// ARRAY DELETE\r\nstore.addCommand(builder\r\n    .names('delete-arr', 'deletearr', 'del-arr', 'delarr')\r\n    .docs(new DocsBuilder()\r\n        .name('delete-arr')\r\n        .aliases('deletearr', 'del-arr', 'delarr')\r\n        .description('Deletes the array.')\r\n        .syntax('delete-arr <array-name>')\r\n        .example('(array arr 1 2 3 4) (delete-arr arr)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.boolean)\r\n    .args(1, DataType.string)\r\n    .run((_, name: string) => {\r\n        return _.storeService.deleteArray(name);\r\n    })\r\n    .build()\r\n)\r\n\r\n// ARRAY APPEND\r\nstore.addCommand(builder\r\n    .names('append', 'append-arr', 'appendarr')\r\n    .docs(new DocsBuilder()\r\n        .name('append')\r\n        .aliases('append-arr', 'appendarr')\r\n        .description('Appends the value to the end of the array.')\r\n        .syntax('append <array-name> <value>')\r\n        .example('(array arr 1 2 4 5) (append arr 10)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.any)\r\n    .args(2, DataType.string, DataType.any)\r\n    .run((_, name: string, value: unknown) => {\r\n        const array = _.storeService.getArray(name);\r\n        checkArrayNameAndIndex(array, name, _);\r\n\r\n        array!.value.push(value);\r\n        _.storeService.setArray(name, array!.value);\r\n\r\n        return value;\r\n    })\r\n    .build()\r\n)\r\n\r\n// ARRAY POP\r\nstore.addCommand(builder\r\n    .names('pop', 'pop-arr', 'poparr')\r\n    .docs(new DocsBuilder()\r\n        .name('pop')\r\n        .aliases('pop-arr', 'poparr')\r\n        .description('Removes and returns the last element of the array.')\r\n        .syntax('pop <array-name>')\r\n        .example('(array arr 1 2 4 5) (pop arr)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.any)\r\n    .args(1, DataType.string)\r\n    .run((_, name: string) => {\r\n        const array = _.storeService.getArray(name);\r\n        checkArrayNameAndIndex(array, name, _);\r\n\r\n        let val = array!.value.pop();\r\n        _.storeService.setArray(name, array!.value);\r\n        return val;\r\n    })\r\n    .build()\r\n)\r\n\r\n// ARRAY INSERT\r\nstore.addCommand(builder\r\n    .names('insert', 'insert-arr', 'insertarr')\r\n    .docs(new DocsBuilder()\r\n        .name('insert')\r\n        .aliases('insert-arr', 'insertarr')\r\n        .description('Inserts the value at the given index of the array.')\r\n        .syntax('insert <array-name> <index> <value>')\r\n        .example('(array arr 1 2 4 5) (insert arr 2 10)')\r\n        .build()\r\n    )\r\n    .returnType(DataType.any)\r\n    .args(3, DataType.string, DataType.number, DataType.any)\r\n    .run((_, name: string, index: number, value: unknown) => {\r\n        const array = _.storeService.getArray(name);\r\n        checkArrayNameAndIndex(array, name, _, index);\r\n\r\n        array!.value.splice(index, 0, value);\r\n        _.storeService.setArray(name, array!.value);\r\n\r\n        return value;\r\n    })\r\n    .build()\r\n)","/**\r\n * This is the entry point of the standard library.\r\n * If you want something to be included in the standard library,\r\n * then create a file in the stdlib folder and import it here.\r\n *\r\n * This file is then imported in the AssistScript.ts file.\r\n */\r\n\r\n/** BASIC **/\r\nimport  \"./basic/basic\";\r\n\r\n\r\n/** OPERATORS **/\r\nimport './operators/logical'\r\nimport './operators/comparison'\r\n\r\n/** MATHS **/\r\nimport \"./math/arthemetic\";\r\nimport \"./math/functions\";\r\nimport \"./math/trigonometry\";\r\nimport \"./math/random\";\r\nimport \"./math/constants\";\r\n\r\n/** CONTROL FLOW **/\r\nimport \"./ctrl/loops\";\r\nimport \"./ctrl/conditionals\";\r\nimport \"./ctrl/varibles\";","import CommandStore from \"./interpreter/CommandStore\";\r\nimport Runner from \"./interpreter/runner/Runner\";\r\nimport BaseContextProvider from \"./services/BaseContextProvider\";\r\n\r\nimport \"./stdlib\";\r\nimport ASBaseError from \"./errors/ASBaseError\"; // Import the standard library\r\n\r\n/**\r\n * The AssistScript class is the main entry point for the AssistScript language.\r\n * It provides a simple interface to execute AssistScript code.\r\n */\r\nexport default class AssistScript {\r\n    contextProvider: BaseContextProvider;\r\n    readonly store: CommandStore = CommandStore.getInstance();\r\n\r\n    /**\r\n     * Creates a new AssistScript instance.\r\n     * @param ctxProvider The context provider to use.\r\n     * By default, a new BaseContextProvider is used, if you want a custom context provider, you can pass it here.\r\n     */\r\n    constructor(ctxProvider?: BaseContextProvider) {\r\n        this.contextProvider = ctxProvider || new BaseContextProvider()\r\n    }\r\n\r\n    /**\r\n     * Executes a given AssistScript code and returns the result.\r\n     * @param str The AssistScript code to execute.\r\n     * @throws ASRuntimeError\r\n     */\r\n    run(str: string): unknown {\r\n        return Runner.run(str, this);\r\n    }\r\n\r\n    /**\r\n     * Executes a given AssistScript code and returns the result.\r\n     * Same as `execute` but catches any errors and returns them as a prettified string.\r\n     * @param str\r\n     */\r\n    sandboxRun(str: string): unknown {\r\n        try {\r\n            return this.run(str);\r\n        } catch (e) {\r\n            if (e instanceof ASBaseError)\r\n                return e.prettify();\r\n            else\r\n                console.error(e);\r\n        }\r\n    }\r\n}\r\n","#!/usr/bin/env node\r\n\r\nimport {Command} from \"commander\";\r\nimport fs from \"fs\";\r\nimport AssistScript from \"./lang-core/AssistScript\";\r\nimport ASBaseError from \"./lang-core/errors/ASBaseError\";\r\nimport readline from \"readline\";\r\n\r\nconst program = new Command();\r\n\r\nprogram\r\n    .name('aslangc')\r\n    .description('The ASLang(AssistScript) runner')\r\n    .version('1.0')\r\n    .option('-r, --repl', 'Run the REPL mode')\r\n    .argument('[file]', 'The AssistScript file to run')\r\n    .action(async (file, options) => {\r\n        if (file && options.repl) {\r\n            console.error('Error: Cannot provide both a file and use the -r option simultaneously.');\r\n            program.help();\r\n        } else if (file) {\r\n            await runFile(file);\r\n        } else if (options.repl) {\r\n            runRepl();\r\n        } else {\r\n            program.help();\r\n        }\r\n    })\r\n\r\nconst as = new AssistScript();\r\n\r\n\r\nfunction runAssistScript(str: string) {\r\n    try {\r\n        const result = as.run(str);\r\n        if (result !== undefined)\r\n            console.log(result);\r\n    } catch (e) {\r\n        if (e instanceof ASBaseError)\r\n            console.error(e.prettify());\r\n        else\r\n            console.error(e);\r\n    }\r\n}\r\n\r\nasync function runFile(file: string) {\r\n    try {\r\n        const data = await fs.promises.readFile(file);\r\n        const content = data.toString();\r\n        runAssistScript(content);\r\n\r\n    } catch (e) {\r\n        // @ts-ignore\r\n        console.error(`Error reading file '${file}'\\n> ${e.message}`);\r\n    }\r\n}\r\n\r\nfunction runRepl() {\r\n    const rl = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout,\r\n        prompt: '> '\r\n    });\r\n\r\n    console.log(\"REPL MODE: \");\r\n\r\n    rl.prompt();\r\n    rl.on('line', (line) => {\r\n        let trimmed = line.trim();\r\n        if (trimmed === 'exit') {\r\n            rl.close();\r\n            return;\r\n        }\r\n\r\n        if (trimmed === 'clear') {\r\n            console.clear();\r\n            rl.prompt();\r\n            return;\r\n        }\r\n\r\n        runAssistScript(line);\r\n        rl.prompt();\r\n\r\n    }).on('close', () => {\r\n        console.log(\"REPL MODE END\")\r\n        process.exit(0);\r\n    });\r\n\r\n}\r\n\r\n\r\nprogram.parse(process.argv);"]}